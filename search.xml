<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>测试下博客2</title>
      <link href="2021/06/06/%E6%B5%8B%E8%AF%95%E4%B8%8B%E5%8D%9A%E5%AE%A22/"/>
      <url>2021/06/06/%E6%B5%8B%E8%AF%95%E4%B8%8B%E5%8D%9A%E5%AE%A22/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>206. 反转链表</title>
      <link href="2021/06/06/206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
      <url>2021/06/06/206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206.反转链表"></a>206.反转链表</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p><p><strong>示例一</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5]</span><br><span class="line">输出：[5,4,3,2,1]</span><br></pre></td></tr></table></figure><p><strong>示例二</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2]</span><br><span class="line">输出：[2,1]</span><br></pre></td></tr></table></figure><p><strong>示例三</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="方法一：迭代-三指针"><a href="#方法一：迭代-三指针" class="headerlink" title="方法一：迭代+三指针"></a>方法一：迭代+三指针</h3><p>需要三个指针(有些题解叫双指针，但我感觉三指针更准确些)pre、cur、nex分别指向前一个节点、当前节点和下一个节点。</p><p>pre初始值None，cur初始指着头节点、nex初始则是头节点的下一个节点。</p><p>每次操作如下：</p><ul><li>cur将下一个节点指向pre，实现局部的链表反转</li><li>pre和cur往后移动一个节点</li><li>nex是一个临时存储节点的变量。第一步cur将下一个节点指向pre时会失去移动的方向，这个时候就直接用nex来帮助cur移动</li></ul><p><img src="https://camo.githubusercontent.com/36cf9298bccf54091dbcabb9ede884bf98d5b2f6f04bd89a36ac2904b26d0971/68747470733a2f2f747661312e73696e61696d672e636e2f6c617267652f30303865476d5a456c7931676e7266316f626f757067333067793063343471702e676966" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseList</span>(<span class="params">self, head</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        pre = <span class="literal">None</span></span><br><span class="line">        cur = head</span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">            nex = cur.<span class="built_in">next</span></span><br><span class="line">            cur.<span class="built_in">next</span> = pre</span><br><span class="line">            pre = cur</span><br><span class="line">            cur = nex</span><br><span class="line">        <span class="keyword">return</span> pre</span><br></pre></td></tr></table></figure><ul><li>时间复杂度$O(n)$</li><li>空间复杂度$O(1)$</li></ul><p><strong>评论区大佬的超级精简版</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseList</span>(<span class="params">self, head</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        p, rev = head, <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> p:</span><br><span class="line">            rev, rev.<span class="built_in">next</span>, p = p, rev, p.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> rev</span><br></pre></td></tr></table></figure><h3 id="方法二：迭代"><a href="#方法二：迭代" class="headerlink" title="方法二：迭代"></a>方法二：迭代</h3><p>做了几题发现，链表使用递归是比较常见的作法。</p><p>有几个问题(我遇到的)需要注意：</p><ul><li>递归反转如何避免成环。</li><li>新的头节点怎么找到。</li></ul><p>考虑上述问题后的步骤：</p><ul><li><p>递归到最后一个节点，将该节点设置为新的头节点，并作为函数的返回值</p></li><li><p>在回溯的过程中，将当前节点的下一个节点的next指针指向当前节点实现反转</p></li><li><p>为了避免成环，将当前节点的下一个节点(此时还指向原来的下一个节点)指向None/null(缺少这一步，在回溯过程结束时会导致原链表的头节点区域成环，比如应该是1&lt;-2&lt;-3&lt;-4&lt;-5，结果是1&lt;-&gt;2&lt;-3&lt;-4&lt;-5，这样程序就困在环里直到超时)</p><p><img src="https://pic.leetcode-cn.com/8951bc3b8b7eb4da2a46063c1bb96932e7a69910c0a93d973bd8aa5517e59fc8.gif" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseList</span>(<span class="params">self, head</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> head==<span class="literal">None</span> <span class="keyword">or</span> head.<span class="built_in">next</span>==<span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        newhead = self.reverseList(head.<span class="built_in">next</span>)</span><br><span class="line">        head.<span class="built_in">next</span>.<span class="built_in">next</span> = head</span><br><span class="line">        head.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> newhead</span><br></pre></td></tr></table></figure><p><strong>需要注意newhead这个节点，在最后一次迭代得到了新的头节点后，在回溯过程中是不变的。</strong></p><ul><li>时间复杂度$O(n)$</li><li>空间复杂度$O(n)$</li></ul></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://leetcode-cn.com/problems/reverse-linked-list/solution/fan-zhuan-lian-biao-shuang-zhi-zhen-di-gui-yao-mo-/">【反转链表】：双指针，递归，妖魔化的双指针 - 反转链表 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p><a href="https://github.com/youngyangyang04/leetcode-master/blob/master/problems/0206.%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.md">leetcode-master/0206.翻转链表.md at master · youngyangyang04/leetcode-master (github.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>203. 移除链表元素</title>
      <link href="2021/06/05/203-%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/"/>
      <url>2021/06/05/203-%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="203-移除链表元素"><a href="#203-移除链表元素" class="headerlink" title="203. 移除链表元素"></a><a href="https://leetcode-cn.com/problems/remove-linked-list-elements/">203. 移除链表元素</a></h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个链表的头节点 <code>head</code> 和一个整数 <code>val</code> ，请你删除链表中所有满足 <code>Node.val == val</code> 的节点，并返回 <strong>新的头节点</strong> 。</p><p><img src="https://assets.leetcode.com/uploads/2021/03/06/removelinked-list.jpg" alt="img"></p><p><strong>示例一</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,6,3,4,5,6], val = 6</span><br><span class="line">输出：[1,2,3,4,5]</span><br></pre></td></tr></table></figure><p><strong>示例二</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [], val = 1</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例三</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [7,7,7,7], val = 7</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="方法1-1：设置哑节点-dummy-，然后直接迭代"><a href="#方法1-1：设置哑节点-dummy-，然后直接迭代" class="headerlink" title="方法1-1：设置哑节点(dummy)，然后直接迭代"></a>方法1-1：设置哑节点(dummy)，然后直接迭代</h3><p>哑节点是一个虚拟的头节点，在这一题里面，头节点是可能被删除的，删除后的头节点还要考虑需不需要删除；或者当指针往后迭代的过程中，头节点就找不到了，没办法之间返回头节点，这个时候设置哑节点可以有效的解决这些麻烦。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeElements</span>(<span class="params">self, head, val</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :type val: int</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        vhead = ListNode(-<span class="number">1</span>,head)<span class="comment">#设置哑节点</span></span><br><span class="line">        p = vhead<span class="comment">#这是移动指针，指向当前要处理的节点</span></span><br><span class="line">        <span class="keyword">if</span> p == <span class="literal">None</span>: <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> p.<span class="built_in">next</span> != <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> (p.<span class="built_in">next</span>).val == val:</span><br><span class="line">                p.<span class="built_in">next</span> = (p.<span class="built_in">next</span>).<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                p = p.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> vhead.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><ul><li>时间复杂度$O(n)$</li><li>空间复杂度$O(1)$</li></ul><h3 id="方法1-2：还是设置哑节点-双指针"><a href="#方法1-2：还是设置哑节点-双指针" class="headerlink" title="方法1-2：还是设置哑节点+双指针"></a>方法1-2：还是设置哑节点+双指针</h3><p>和方法1-1没啥区别，个人感觉双指针直观上好理解一点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeElements</span>(<span class="params">self, head, val</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :type val: int</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        vhead = ListNode(-<span class="number">1</span>,head)</span><br><span class="line">        left = vhead</span><br><span class="line">        right = head</span><br><span class="line">        <span class="keyword">if</span> vhead.<span class="built_in">next</span> == <span class="literal">None</span>: <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> right != <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> right.val == val:</span><br><span class="line">                left.<span class="built_in">next</span> = right.<span class="built_in">next</span></span><br><span class="line">                right = right.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left = right</span><br><span class="line">                right = right.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> vhead.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><ul><li>时间复杂度$O(n)$</li><li>空间复杂度$O(1)$</li></ul><h3 id="方法2：递归"><a href="#方法2：递归" class="headerlink" title="方法2：递归"></a>方法2：递归</h3><p><strong>参考了评论区的大佬的思路。</strong>迭代的方法要稍微理解一下，简单来说，对头节点以外的节点进行删除val的操作。递归的中止调节是头节点为空。</p><p><strong>我个人理解：</strong>对链表从前往后看就是把当前节点和后续已经删除了val的链表相连，从后往前看就是链表从后往前删除有val值的节点。</p><p><a href="https://leetcode-cn.com/problems/remove-linked-list-elements/solution/yi-chu-lian-biao-yuan-su-by-leetcode-sol-654m/"><strong>官方的解答文字：</strong></a>链表的定义具有递归的性质，因此链表题目常可以用递归的方法求解。这道题要求删除链表中所有节点值等于特定值的节点，可以用递归实现。</p><p>对于给定的链表，首先对除了头节点head以外的节点进行删除操作，然后判断head的节点值是否等于给定的val。如果head的节点值等于val，则head需要被删除，因此删除操作后的头节点为head.next；如果head 的节点值不等于val，则head保留，因此删除操作后的头节点还是head。上述过程是一个递归的过程。</p><p>递归的终止条件是head为空，此时直接返回head。当head不为空时，递归地进行删除操作，然后判断head的节点值是否等于val并决定是否要删除head。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeElements</span>(<span class="params">self, head, val</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :type val: int</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> head == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        head.<span class="built_in">next</span> = self.removeElements(head.<span class="built_in">next</span>,val)</span><br><span class="line">        <span class="keyword">if</span> head.val == val:</span><br><span class="line">            <span class="keyword">return</span> head.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure><ul><li>时间复杂度$O(n)$</li><li>空间复杂度$O(n)$，空间复杂度主要取决于递归调用栈，最多不会超过n层。</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://github.com/youngyangyang04/leetcode-master/blob/master/problems/0203.%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0.md">leetcode-master/0203.移除链表元素.md at master · youngyangyang04/leetcode-master (github.com)</a></p><p><a href="https://leetcode-cn.com/problems/remove-linked-list-elements/solution/yi-chu-lian-biao-yuan-su-by-leetcode-sol-654m/">移除链表元素 - 移除链表元素 - 力扣（LeetCode） (leetcode-cn.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 链表 </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>交换与路由总复习第一章</title>
      <link href="2021/06/05/%E4%BA%A4%E6%8D%A2%E4%B8%8E%E8%B7%AF%E7%94%B1%E6%80%BB%E5%A4%8D%E4%B9%A0%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
      <url>2021/06/05/%E4%BA%A4%E6%8D%A2%E4%B8%8E%E8%B7%AF%E7%94%B1%E6%80%BB%E5%A4%8D%E4%B9%A0%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="交换概论"><a href="#交换概论" class="headerlink" title="交换概论"></a>交换概论</h1><h2 id="基本电信系统"><a href="#基本电信系统" class="headerlink" title="基本电信系统"></a>基本电信系统</h2><p>基本通信系统是用户全互连的通信方式</p><h3 id="多用户全互连通信有何特点？-为什么通信网不直接采用这种方式？"><a href="#多用户全互连通信有何特点？-为什么通信网不直接采用这种方式？" class="headerlink" title="多用户全互连通信有何特点？ 为什么通信网不直接采用这种方式？"></a>多用户全互连通信有何特点？ 为什么通信网不直接采用这种方式？</h3><p><strong>特点：</strong></p><ul><li>若用户终端数为 N， 则两两相连所需的线对数为 $N(N-1)/2$， 所以这种结构所需的线对数将按 $N^2$ 增加， 当 N 很大时， 其复杂度是不能接受的。</li><li>每个用户终端需要配置一个 N-1 路的选择开关。</li></ul><p><strong>缺点：</strong></p><ul><li>两两互连所需的线对数的数量很大， 线路浪费大、 成本高。</li><li> 要配置多路选择开关， 且在主、 被叫终端之间需要复杂的开关控制及选择协调。</li><li>加一个用户终端的操作很复杂。 当增加第 N+1 个终端时， 必须增设 N 条线路，安装维护困难。 当用户终端数 N 较大时， 采用这种方式来实现多个用户之间的通信是不现实的， 根本无法实用化。</li></ul><h2 id="电信网"><a href="#电信网" class="headerlink" title="电信网"></a>电信网</h2><h3 id="使用电信网的原因"><a href="#使用电信网的原因" class="headerlink" title="使用电信网的原因"></a>使用电信网的原因</h3><ul><li>基本电信系统的“$N^2$”问题是必须解决的经济问题</li><li>复用技术能够很好的解决长途传输的效率问题</li><li>寻址技术能够很好的解决长途信道的数量问题</li><li>利用复用技术和寻址技术能够很好的解决“$N^2$”问题</li></ul><h3 id="电信网的结构"><a href="#电信网的结构" class="headerlink" title="电信网的结构"></a>电信网的结构</h3><img src="https://api2.mubu.com/v3/document_image/1b920c78-a76f-4451-8a0b-f91d308c8e61-1279996.jpg" alt="img" style="zoom: 50%;" /><ul><li>信令网：<br>通信网的神经网络，信令起到通信过程中建立连接，传输信息，拆除连接等功能</li><li>同步网：<br>保证网络中各节点同步工作</li><li>管理网：<br>电信网和电信业务的性能管理、配置管理、故障管理、计费管理和安全管理</li></ul><h2 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h2><h3 id="交换的概念"><a href="#交换的概念" class="headerlink" title="交换的概念"></a>交换的概念</h3><p>所谓电信交换，就是在电信网上，在通信的源点和目的点之间建立通信通道，并传送信息的机制。</p><ul><li>选路：<br>每一个交换设备如何选择合适的出线，从而在交换网中建立最佳的从源点到目的点的信息通道</li><li>交换：<br>每个交换设备内部如何将入线的信息送到出线上</li></ul><h3 id="为什么要引入交换功能"><a href="#为什么要引入交换功能" class="headerlink" title="为什么要引入交换功能"></a>为什么要引入交换功能</h3><p>为了克服两两全互连的连接方式所存在的如下 3 个问题：</p><ul><li>两两互连所需的线对数的数量很大， 线路浪费大、 成本高。</li><li>要配置多路选择开关， 且在主、 被叫终端之间需要复杂的开关控制及选择协调。</li><li>增加一个用户终端的操作很复杂。 当增加第 N+1 个终端时， 必须增设 N 条线路，<br>安装维护困难。</li></ul><p>如果在用户分布密集的中心安装一个设备——交换节点（也称为交换机） ， 每个<br>用户的终端设备不再是两两互连， 而是分别经由各自的一条专用通信线路连接到交换节点<br>上。 这时 N 个用户只需要 N 条电话线， 用户终端无需使用多路选择开关； 当增加新终端时，<br>只需增加一条通信线路。</p><h2 id="复用技术和寻址技术"><a href="#复用技术和寻址技术" class="headerlink" title="复用技术和寻址技术"></a>复用技术和寻址技术</h2><h3 id="复用"><a href="#复用" class="headerlink" title="复用"></a>复用</h3><ul><li>频分复用</li><li>码分复用</li><li>波分复用</li><li>时分复用<ul><li>同步时分复用<ul><li>是位置信道：依据数字信号在时间轴上的位置区别各路信号，无信息传送时也占用信道</li><li>各支路的信息比特率稳定</li><li>信号经过复用器和分路器时会有传输时延，但时延不大。</li></ul></li><li>统计时分复用<ul><li>信息属于哪路取决于标志码，与出现的时间无关；</li><li>分组长度可变，分组头起定界作用；</li><li>统计复用提高信道利用率；</li><li>一定容量的排队存贮器，解决瞬间的出线冲突；</li></ul></li><li>异步时分复用<ul><li>标志化信道：分组长度固定，分组头标志输出端</li><li>统计复用提高信道利用率</li><li>插入空信元保持信元同步</li><li>较小容量的排队存贮器，解决瞬间的出线冲突</li></ul></li></ul></li></ul><h3 id="寻址"><a href="#寻址" class="headerlink" title="寻址"></a>寻址</h3><ul><li>有连接寻址：<br>用户利用人机信令信号，把寻址要求通知信令网；    信令网在信源与信宿之间，利用网络资源建立连接；   然后传递信号；    呼叫结束，信令网释放网络资源。 </li><li>无连接寻址：<br>在各个网络节点，根据信元中的目的地址数据，借助于路由器具有的地址知识，选择通往目的地的链路，在每个节点都进行竞争接入。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 交换与路由 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 交换与路由 </tag>
            
            <tag> 复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试下博客</title>
      <link href="2021/06/05/test/"/>
      <url>2021/06/05/test/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/06/05/hello-world/"/>
      <url>2021/06/05/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
