<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>交换与路由总复习第五章</title>
      <link href="/2021/06/14/%E4%BA%A4%E6%8D%A2%E4%B8%8E%E8%B7%AF%E7%94%B1%E6%80%BB%E5%A4%8D%E4%B9%A0%E7%AC%AC%E4%BA%94%E7%AB%A0/"/>
      <url>/2021/06/14/%E4%BA%A4%E6%8D%A2%E4%B8%8E%E8%B7%AF%E7%94%B1%E6%80%BB%E5%A4%8D%E4%B9%A0%E7%AC%AC%E4%BA%94%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1>分组交换与分组交换网</h1><h2 id="分组交换">分组交换</h2><h3 id="什么是分组交换">什么是分组交换</h3><p>将要传送的数据按一定的长度分成多个数据段，这些数据段称为“分组”，发送端把这些“分组”分别发送出去。到达目的地，目的交换机将一个个“分组”按顺序装好，还原成原文件发送给收端用户，这一过程称为分组交换。</p><h3 id="分组交换的两种方式和特点">分组交换的两种方式和特点</h3><p><img src="https://api2.mubu.com/v3/document_image/c3b7f6f7-c75c-4952-a00a-a01540df1e39-1279996.jpg" alt="img"></p><h4 id="虚电路的两种交换方式">虚电路的两种交换方式</h4><h5 id="交换虚电路SVC">交换虚电路SVC</h5><p>用户通过发送呼叫请求分组来建立虚电路的方式。 是临时的虚电路。</p><h5 id="永久虚电路PVC">永久虚电路PVC</h5><p>应用户预约， 由网络运营商为之建立固定的虚电路， 而不需在呼叫时临时建立虚电路， 可直接进入数据传送阶段的方式。 属于专线。</p><h3 id="分组交换如何进行路由选择">分组交换如何进行路由选择</h3><p>分组交换网中可以将路由选择算法分为<strong>非自适应路由选择算法</strong>和<strong>自适应路由选择算法</strong>两大类。</p><ul><li><p>非自适应（静态）路由选择算法<br>非自适应路由选择算法也叫静态路由选择策略， 其特点是算法简单、 开销较小， 但性能差、 效率低， 适于拓扑结构很少变化的网络。 静态路由选择策略包括<strong>泛洪式路由选择法</strong>、 <strong>固定路由表法</strong>和<strong>随机路由选择法</strong>。</p></li><li><p>自适应（动态）路由选择算法<br>自适应路由选择算法又称为动态路由选择策略， 即节点的路由表根据网络的负载和链路的状态而不断地变化， 适合于拓扑结构经常变化的网络。 动态路由选择策略包括<strong>独立路由选择</strong>、 <strong>集中式路由选择</strong>和<strong>分布式路由选择</strong>等策略。</p></li></ul><h3 id="分组交换如何进行流量控制">分组交换如何进行流量控制</h3><ul><li><strong>证实法</strong>：发送方发送一个分组之后等待证实之后再发送新的分组；</li><li><strong>预约法</strong>：发送端在向接收端发送分组之前，先向接收端预约缓冲存储区，根据接收端所允许发送分组的数量发送分组，从而有效地避免接收端发生死锁。</li><li><strong>许可证法</strong>：许可证法就是在网络内设置一定数量的“许可证”，许可证的状态分为空载和满载，不携带分组时为空载，携带分组为满载。</li></ul><h2 id="X-25协议">X.25协议</h2><p>X.25协议是数据终端设备DTE和数据电路终接设备DCE之间的接口协议；任何要接入到分组交换网的终端设备必须在接口处满足协议的规定</p><h3 id="协议体系结构">协议体系结构</h3><ul><li><p>物理层：功能如下：</p><ul><li>DTE和DCE之间的数据传输；</li><li>在设备之间提供控制信号；</li><li>为同步数据流和规定比特速率提供时钟信号</li><li>提供电气地；</li><li>提供机械的连接器</li></ul></li><li><p>数据链路层——LAPB<br>X.25的数据链路层协议采用的是HDLC（高级数据链路控制规程）的一个子集——LAPB（Link Access Procedure Balanced，平衡型链路访问规程）协议。</p><p>功能：</p><ul><li>DTE和DCE之间的数据传输；</li><li>发送和接收端信息的同步；</li><li>传输过程中的检错和纠错；</li><li>有效的流量控制；</li><li>协议性错误的识别和告警；</li><li>链路层状态的通知。</li></ul></li><li><p>分组层</p><ul><li>在X.25接口为每个用户呼叫提供一个逻辑信道；</li><li>通过逻辑信道群号（LCGN）和逻辑信道号（LCN）来区分与每个用户呼叫有关的分组；</li><li>为每个用户的呼叫连接提供有效的分组传输，包括顺序编号、分组的确认和流量控制过程；</li><li>提供交换虚电路（SVC）和永久虚电路（PVC）的连接；</li><li>提供建立和清除交换虚电路连接的方法；</li><li>监测和恢复分组层的差错。</li></ul></li></ul><h3 id="帧的类型和结构">帧的类型和结构</h3><p><img src="https://api2.mubu.com/v3/document_image/28db226f-07aa-4316-b066-879b8d8f3492-1279996.jpg" alt="img"></p><h4 id="可分为三类帧">可分为三类帧</h4><ul><li>信息帧（I帧）</li><li>监控帧（S帧）</li><li>无编号帧（U帧）</li></ul><p>所有帧均包含标志F、地址字段A、控制字段C、帧检验序列FCS，部分帧还包含信息字段I。</p><h4 id="如何区分三类帧">如何区分三类帧</h4><ul><li>信息帧的识别标志是C字段的第1比特为“0”；</li><li>监控帧的识别标志是C字段的第1比特位和第2比特位分别为“1”和“0”;</li><li>无编号帧的识别标志是C字段的第1比特位和第2比特位均为“1”。</li></ul><h3 id="数据链路层工作原理">数据链路层工作原理</h3><img src="https://api2.mubu.com/v3/document_image/293f7aac-b744-4860-b380-e7aaeda0d4b8-1279996.jpg" alt="img" style="zoom:50%;" /><img src="C:\Users\Dogwealth\AppData\Roaming\Typora\typora-user-images\image-20210614171042628.png" alt="image-20210614171042628" style="zoom:50%;" /><h2 id="虚电路和逻辑信道的区别和联系">虚电路和逻辑信道的区别和联系</h2><ul><li>虚电路是主叫 DTE 到被叫 DTE 之间建立的虚连接， 而逻辑信道是在 DTE-DCE 接口或网内中继线上可以分配的， 代表子信道的一种编号资源， 一条虚电路是由多个逻辑信道链接而成的。 每一条线路的逻辑信道号的分配是独立进行的。</li><li>一条虚电路具有呼叫建立、 数据传输和呼叫清除过程。 永久虚电路可以在预约时由网络建立， 也可以通过预约予以清除。 而逻辑信道号是一种客观存在， 它有占用和空闲的区别， 但是不会消失。</li></ul><h2 id="X-25分组交换和帧中继的区别和联系">X.25分组交换和帧中继的区别和联系</h2><p><strong>区别</strong></p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">帧中继</th><th style="text-align:center">分组交换</th></tr></thead><tbody><tr><td style="text-align:center">特点</td><td style="text-align:center">速率高、时延小</td><td style="text-align:center">速率低、时延大</td></tr><tr><td style="text-align:center">最小单位</td><td style="text-align:center">帧</td><td style="text-align:center">分组</td></tr><tr><td style="text-align:center">信息传输</td><td style="text-align:center">端到端确认信息</td><td style="text-align:center">点到点确认信息</td></tr><tr><td style="text-align:center">控制信令</td><td style="text-align:center">公共信令</td><td style="text-align:center">随路信令</td></tr><tr><td style="text-align:center">协议栈</td><td style="text-align:center">物理层、链路层</td><td style="text-align:center">物理层、链路层、网络层</td></tr><tr><td style="text-align:center">寻址和选路</td><td style="text-align:center">二层（链路层）完成</td><td style="text-align:center">三层（分组层）完成</td></tr><tr><td style="text-align:center">其他</td><td style="text-align:center">网络内部不需要差错控制 传输线必须是光纤</td><td style="text-align:center"></td></tr></tbody></table><p><strong>联系</strong></p><ul><li>帧中继是分组交换的改进，都采用面向连接的交换技术</li><li>都可以提供PVC（永久虚拟电路）和SVC（交换虚拟电路）业务</li><li>均采用统计十分复用方式，可以动态分配带宽</li></ul>]]></content>
      
      
      <categories>
          
          <category> 专业课 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 交换与路由 </tag>
            
            <tag> 复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>交换与路由总复习第九、十章</title>
      <link href="/2021/06/13/%E4%BA%A4%E6%8D%A2%E4%B8%8E%E8%B7%AF%E7%94%B1%E6%80%BB%E5%A4%8D%E4%B9%A0%E7%AC%AC%E4%B9%9D%E3%80%81%E5%8D%81%E7%AB%A0/"/>
      <url>/2021/06/13/%E4%BA%A4%E6%8D%A2%E4%B8%8E%E8%B7%AF%E7%94%B1%E6%80%BB%E5%A4%8D%E4%B9%A0%E7%AC%AC%E4%B9%9D%E3%80%81%E5%8D%81%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1>第九章——下一代网络和软交换</h1><h2 id="软交换">软交换</h2><h3 id="含义">含义</h3><p>将呼叫控制功能从承载和业务中分离出来，通过软件实现基本呼叫控制功能，包括呼叫选路、管理控制、连接控制（建立/拆除会话）和信令互通，从而实现业务与呼叫控制分离、呼叫控制与承载分离，为控制、交换和软件可编程功能建立分离的平面。</p><h2 id="下一代网络NGN">下一代网络NGN</h2><h3 id="NGN的体系结构和每一层的功能">NGN的体系结构和每一层的功能</h3><p>NGN可以从功能上分为四个相对独立的层次，从下至上依次是</p><h4 id="接入层">接入层</h4><p>利用各种接入设备为各类终端设备和网络提供访问 NGN 网络资源的入口功能， 负责将不同类型的终端用户接入到核心传输网络， 并实现不同信息格式之间的转换。</p><h4 id="传输层">传输层</h4><p>传输层负责提供各种信令流和媒体流传输的通道， 完成信息传输。</p><h4 id="控制层">控制层</h4><p>控制层是 NGN 体系结构的核心控制层次， 主要提供呼叫控制、 接入协议适配、 互联互通等功能， 并为业务层提供访问底层各种网络资源的开放接口。</p><h4 id="业务层">业务层</h4><p>业务层的主要功能是创建、 执行和管理 NGN 的各项业务， 包括多媒体业务、 增值业务和第三方业务等。</p><h3 id="NGN的特点">NGN的特点</h3><ul><li>采用分层的、全开放的体系结构和标准接口，具有独立的模块化结构。</li><li>下一代网络是业务驱动的网络，应实现业务与呼叫控制分离、呼叫控制与承载分离。</li><li>下一代网络是基于统一协议的分组网络体系，NGN可使用IP协议，使得基于IP的业务都能在不同网上实现互通，支持各种业务和用户任意接入</li><li>可与现有网络互通。</li><li>支持移动性。</li><li>电信级的硬件平台。</li></ul><h2 id="NGN支持的主要协议">NGN支持的主要协议</h2><h3 id="媒体网关控制协议——MGCP">媒体网关控制协议——MGCP</h3><p>MGCP是软交换设备和媒体网关之间或软交换与MGCP终端之间的通信协议，用于完成软交换对媒体网关的控制，处理软交换与媒体网关的交互，控制媒体流的连接、建立、释放。</p><h3 id="会话启动协议——SIP（Session-Initiation-Protocol）">会话启动协议——SIP（Session Initiation Protocol）</h3><h4 id="SIP的功能实体">SIP的功能实体</h4><h5 id="1-SIP用户代理（UA）">1.SIP用户代理（UA）</h5><ul><li>User Agent Client (UAC) ，用于发起一个呼叫请求</li><li>User Agent Server (UAS) ，用于对呼叫请求进行回应</li></ul><h5 id="2-SIP网络服务器">2.SIP网络服务器</h5><ul><li>RegisterServer <strong>注册服务器</strong>: 接收用户的注册请求，记录终端的IP地址，记录用户的当前位置信息，是实现号码移动性的基础</li><li>ProxyServer <strong>代理服务器</strong>：完成路由功能，将SIP用户请求，发送到下一跳代理或用户</li><li>RedirectServer <strong>重定向服务器</strong>：提供地址解析服务，类似于DNS</li><li>LocationServer <strong>位置服务器</strong>：配合代理服务器和重定向服务器提供可能的被叫用户的地址(或位置）</li></ul><h4 id="SIP的7种信令">SIP的7种信令</h4><h5 id="请求">请求</h5><ul><li>INVITE:用于邀请用户或者服务参与一个会话。</li><li>ACK：对INVITE请求的响应消息的确认，ACK和INVITE请求一起使用</li><li>BYE:用于结束会话。</li><li>OPTIONS:用于查询服务器的相关消息和功能。</li><li>CANCEL:用于取消正在进行的请求，但不取消已经完成的请求。</li><li>REGISTER：在注册服务器上注册用户代理</li></ul><h5 id="响应">响应</h5><ul><li>1XX：通知服务器或代理正在执行处理，终端应该INVITE  发起呼叫，并对会话进行描述<ul><li>100：Trying</li><li>180: Ringing</li></ul></li><li>2XX：请求成功<ul><li>200：OK</li><li>3XX：重定向响应，终端应向新地址发起新请求</li><li>4XX：请求失败，终端的请求被拒绝</li><li>5XX：服务器内部错误造成请求不能被响应</li><li>6XX：全局错误，所有未来的对该用户的请求都将失败</li></ul></li></ul><h4 id="SIP流程举例">SIP流程举例</h4><ul><li>注册流程<br><img src="https://api2.mubu.com/v3/document_image/4c2c69e9-7d0e-42e4-8d88-1c3c77659d71-1279996.jpg" alt="img" style="zoom:50%;" /></li><li>注销流程<br><img src="https://api2.mubu.com/v3/document_image/aa8baed8-18eb-4b50-8cc9-78165914b8a5-1279996.jpg" alt="img" style="zoom:50%;" /></li><li>基本呼叫建立过程<br><img src="https://api2.mubu.com/v3/document_image/8f0791a5-7018-4cb0-b16a-08b50aaa0848-1279996.jpg" alt="img" style="zoom:50%;" /></li><li>正常呼叫释放过程<br><img src="https://api2.mubu.com/v3/document_image/af11de1d-a811-4c73-b306-1b314c729dd4-1279996.jpg" alt="img" style="zoom: 50%;" /></li><li>被叫忙呼叫释放<br><img src="https://api2.mubu.com/v3/document_image/4bc88866-15c4-420d-9abd-2cf603885823-1279996.jpg" alt="img" style="zoom:50%;" /></li><li>被叫无应答流程一<br><img src="https://api2.mubu.com/v3/document_image/c2deddf8-58da-42e0-8b08-f8f08e6e219c-1279996.jpg" alt="img" style="zoom:50%;" /></li><li>被叫无应答流程二<br><img src="https://api2.mubu.com/v3/document_image/c50bb979-e0f5-4569-af9c-49b67435aac0-1279996.jpg" alt="img" style="zoom:50%;" /></li><li>跨域呼叫过程<br><img src="https://api2.mubu.com/v3/document_image/370fb4bc-6fcd-4400-881e-ea9e7048f177-1279996.jpg" alt="img" style="zoom:50%;" /></li><li>SIP网络与PSTN网络互通<br><img src="https://api2.mubu.com/v3/document_image/16afb4d3-54a3-4235-9f53-2194b6730c1c-1279996.jpg" alt="img" style="zoom:50%;" /></li></ul><h3 id="信令传输适配协议——SIGTRAN">信令传输适配协议——SIGTRAN</h3><h4 id="功能">功能</h4><ul><li>在可靠的IP传输的基础上，承载高层的信令协议；</li><li>提供与PSTN接口上相同级别的业务；</li><li>提供透明传输。</li></ul><h1>第十章——IMS技术</h1><h2 id="IP多媒体子系统（IP-Multimedia-Subsystem，IMS）">IP多媒体子系统（IP Multimedia Subsystem，IMS）</h2><h2 id="IMS的概念和特点">IMS的概念和特点</h2><h3 id="概念">概念</h3><ul><li>是叠加在分组交换（PS）域上的用于支持多媒体业务的子系统，目的是在基于全IP的网络上为移动用户提供多媒体业务。IP是指IMS可以实现基于IP的传输、基于IP的会话控制和基于IP的业务实现，实现承载、业务与控制的分离。</li><li>多媒体是指语音、数据、视频、图片、文本等多种媒体组合，可以支持多种接入方式。</li><li>子系统是指IMS依赖于现有网络技术和设备，最大程度重用现有网络系统。</li></ul><h3 id="特点">特点</h3><ul><li>接入无关，支持多种固定/移动接入方式的融合</li><li>采用归属地控制</li><li>提供丰富而动态的组合业务</li><li>基于 SIP 的会话控制。</li><li>统一策略控制</li><li>多种安全接入机制共存</li></ul><h2 id="IMS和IP的联系与区别">IMS和IP的联系与区别</h2><h3 id="联系">联系</h3><ul><li>IMS 和软交换都基于 IP 分组网</li><li>都实现了控制与承载的分离</li><li>大部分的协议都相似或者完全相同， 许多网关设备和终端设备可以通用。</li></ul><h3 id="区别">区别</h3><ul><li>在软交换控制与承载分离的基础上，IMS更进一步的实现了呼叫控制层和业务控制层的分离。</li><li>IMS起源于移动通信网络的应用，因此充分考虑了对移动性的支持，并增加了外置数据库——归属用户服务器（HSS），用于用户鉴权和保护用户业务触发规则。</li><li>IMS全部采用SIP作为呼叫控制和业务控制的信令，而在软交换中，SIP只是可用于呼叫控制的多种协议的一种，更多的使用MGCP和H.248协议</li></ul>]]></content>
      
      
      <categories>
          
          <category> 专业课 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 交换与路由 </tag>
            
            <tag> 复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>交换与路由总复习第八章</title>
      <link href="/2021/06/12/%E4%BA%A4%E6%8D%A2%E4%B8%8E%E8%B7%AF%E7%94%B1%E6%80%BB%E5%A4%8D%E4%B9%A0%E7%AC%AC%E5%85%AB%E7%AB%A0/"/>
      <url>/2021/06/12/%E4%BA%A4%E6%8D%A2%E4%B8%8E%E8%B7%AF%E7%94%B1%E6%80%BB%E5%A4%8D%E4%B9%A0%E7%AC%AC%E5%85%AB%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1>IP 交换与 MPLS 交换技术</h1><h2 id="IP和ATM的特点对比">IP和ATM的特点对比</h2><img src="https://api2.mubu.com/v3/document_image/1263a8a1-bd34-4194-8825-7008fc221304-1279996.jpg" alt="img" style="zoom:50%;" /><h2 id="IP与ATM的融合模型">IP与ATM的融合模型</h2><h3 id="重叠模型">重叠模型</h3><p>重叠模型是把 ATM 网络看成另一种承载 IP 数据分组的异型子网， 将 IP 层直接叠加在 ATM 层之上， 这样 IP 数据分组封装在 ATM 信元中， 使得 IP 数据分组的转发速度提高到了 ATM 信元交换的级别上。</p><h3 id="集成模型">集成模型</h3><p>集成模型是把 ATM 层和 IP 层看成是同样的对等层， 这样可以消除复杂的网络间映射， 只保留一套 IP 地址和一种 IP 选路协议， 结合了 IP 路由的灵活性和 ATM 交换的快速性， 并保障了QoS； 它继承了 IP 协议的应用广泛和 ATM 交换的大容量和高速度， 从无连接方式转变为面向连接方式， 使用短的标记替代长的 IP 地址进行 IP 数据分组的转发， 达到了快速高效的目标。</p><img src="https://api2.mubu.com/v3/document_image/188e3849-1573-4270-8a44-e395aa5e1fc2-1279996.jpg" alt="img" style="zoom:50%;" /><h2 id="IP交换——集成模型1">IP交换——集成模型1</h2><h3 id="驱动方式——数据流驱动">驱动方式——数据流驱动</h3><p>**IP交换是基于数据流驱动的。**在IP交换中将流分为两类：</p><ul><li>端口到端口的流：具有相同源IP地址、源端口号、目的IP地址和目的端口号的一个IP数据分组序列。</li><li>主机到主机的流：具有相同源IP地址、目的IP地址的一个IP数据分组序列。</li></ul><p>IP交换的四个工作阶段：</p><ul><li>对默认信道上传来的数据分组进行存储转发</li><li>向上游节点发送改向消息</li><li>收到下游节点的改向消息</li><li>在ATM直通连接上传送分组</li></ul><h2 id="标签交换——集成模型2">标签交换——集成模型2</h2><h3 id="驱动方式——拓扑驱动">驱动方式——拓扑驱动</h3><p>在数据流传送之前预先建立二层的直通连接，并将选路拓扑映射到直通连接上。</p><h3 id="标签">标签</h3><p>标签是数据分组上附加的一个字段，在标签交换中，对三层分组头进行分析后，将其映射到一个固定长度的、无结构的值中，这个值就叫做标签。</p><p>标签交换所基于的二层技术不局限于ATM ，还可以为帧中继、802.3等</p><ul><li>在ATM网络中，标签可以是ATM信元的VPI、VCI或者VPI+VCI</li><li>在帧中继网络中，标签可以是协议数据单元的DLCI值</li><li>在IP网络中，标签就是一个新的附加字段。</li></ul><h3 id="转发等价类">转发等价类</h3><p><strong>转发等价类</strong>（<strong>FEC</strong>：forwarding equivalence class）是一组具有相同特性的数据分组，这一组数据分组以相似的方式在网络中转发，FEC可被看作是具有相同选路决策的一类数据分组。</p><h3 id="Tag交换必备组件和相应功能">Tag交换必备组件和相应功能</h3><h4 id="标签边缘路由器">标签边缘路由器</h4><p><strong>标签边缘路由器</strong>（<strong>TER</strong>：tag edge routers）位于标签交换网络的边缘。它负责给进入到标签交换网络的数据分组加上标签，并负责将离开标签交换网络的数据分组的标签去除，对数据分组进行第三层转发。</p><h4 id="标签交换路由器">标签交换路由器</h4><p><strong>标签交换路由器</strong>（<strong>TSR</strong>：tag switch routers）位于标签交换网络的内部，负责根据标签来转发数据分组。</p><h3 id="什么是FIB、TIB和TDP">什么是FIB、TIB和TDP</h3><h4 id="FIB——转发信息库">FIB——转发信息库</h4><h4 id="TIB——标签信息库">TIB——标签信息库</h4><p>TIB存储着有关数据分组按照标签转发的相关信息，这些信息包括输入端口号、输出端口号、输入标签、输出标签、目的网段地址等。</p><h4 id="TDP——标签分发协议">TDP——标签分发协议</h4><p>标签交换设备（包括TSR和TER）使用TDP向其相邻节点通知标签关联信息和更新标签信息库。</p><h3 id="标签交换的工作原理">标签交换的工作原理</h3><h4 id="第一步——先进行标签分配建立TIB">第一步——先进行标签分配建立TIB</h4><h5 id="下游分配">下游分配</h5><img src="https://api2.mubu.com/v3/document_image/51f09e13-f780-4b0b-b5b1-bc319a938e88-1279996.jpg" alt="img" style="zoom: 50%;" /><ul><li>由标准路由协议确定转发路由TER1、TSR1、…、TER2，并根据标签分发协议TDP采用下游分配方式进行标签分配，建立标签信息库TIB。</li><li>首先由出口TER2给A-B路由<strong>对应的TIB表项</strong>分配输入标签5，然后通过<strong>端口</strong>5把<strong>标签5关联信息</strong>发送给上游的TSR3</li><li>TSR3通过端口6接收到标签5关联信息后，找到A-B路径的相应表项后，将输出标签5填入到输出标签字段，在输入标签字段分配一个标签4并通过端口1将标签关联信息4发送给上游节点TSR2</li><li>依次类推，TSR1将标签关联信息2通过端口7发送给上游入口节点TER1后，TER1在TIB中A-B路径对应表项的输出标签字段填入输出标签2，至此整个通路的标签交换设备都建立了TIB，完成标签分配过程。</li></ul><h5 id="上游分配">上游分配</h5><img src="https://api2.mubu.com/v3/document_image/ecb9877b-07b0-444a-9db4-7a267c64b1d9-1279996.jpg" alt="img" style="zoom:50%;" /><ul><li>由标准路由协议确定转发路由TER1、TSR1、…、TER2，并根据标签分发协议TDP采用上游分配方式进行标签分配，建立标签信息库TIB</li><li>首先由入口TER1给A-B路由对应的TIB表项分配输出标签2，由端口1把标签2关联信息转发给下游节点TSR1</li><li>TSR1通过端口7接收到标签2关联信息后，查找A-B路由对应表现并将输入标签2填入输入标签字段，然后在输出标签字段分配标签1并通过端口3将标签1关联信息发送给下游节点TSR2.</li><li>以此类推，直到TSR3通过端口6将标签5关联信息发送给最下游节点TER2，TER2通过端口5接收后查找A-B路由对应的TIB表项，将输入标签5填入输入标签字段，至此整个通路的所有交换设备都建立了TIB，完成标签分配过程</li></ul><h4 id="下游按需分配">下游按需分配</h4><img src="https://api2.mubu.com/v3/document_image/ef3154f4-43b0-47bf-8318-d38e697e7845-1279996.jpg" alt="img" style="zoom:50%;" /><p>下游按需分配与下游分配过程相似，所不同的是只在上游TSR提出标签分配请求时，下游TSR才分配标签。</p><h4 id="第二步——数据传输">第二步——数据传输</h4><ul><li>TER1接收到要转发的路径A-B的数据分组时，给数据分组加上标签2后由端口1转发到下一个节点的TSR1</li><li>TSR1通过端口7接收到数据分组，查找相应的TIB表项，将数据的标签2替换成标签1后通过端口3转发给下一个节点TSR2</li><li>以此类推，直到TSR通过端口6将带有标签5的数据分组转发给TER2，TER2通过端口5接收数据分组并去掉标签，然后把数据分组交给上层应用，从而完成数据分组的传送过程。</li></ul><h2 id="多协议标记交换MPLS——集成模型3">多协议标记交换MPLS——集成模型3</h2><h3 id="多协议的体现">多协议的体现</h3><ul><li>对上兼容IPv4、IPv6等多种主流网络层协议，将各种传输技术统一在一个平台之上；</li><li>对下支持ATM、PPP、SDH、DWDM等多种链路层协议，从而使得多种网络的互连互通成为可能。</li></ul><h3 id="MPLS网络的基本概念">MPLS网络的基本概念</h3><h4 id="MPLS标记边缘路由器——LER">MPLS标记边缘路由器——LER</h4><p>LER位于MPLS网络边缘与其它网络或用户相连，执行全部的第三层路由的功能， 完成和相应标记的映射和去除。</p><h4 id="MPLS标记核心路由器——LSR">MPLS标记核心路由器——LSR</h4><p>LSR具有第三层转发分组和第二层交换分组的功能， 通过 LDP 建立标记信息库 LIB， 完成标记交换实现分组转发的过程。</p><h4 id="标记交换路径——LSP">标记交换路径——LSP</h4><p><em>是MPLS网络为具有一些共同特性的分组通过网络而选定的一条通路，由入口的LER、一系列LSR和出口的LER以及它们之间由标记所标识的逻辑信道组成。</em></p><p><strong>两种LSP的建立方式</strong></p><ul><li><strong>独立控制方式</strong><br><em>个LSR可以独立地为FEC分配标记并将映射关系向相邻LSR分发</em></li><li><strong>有序控制方式</strong><br><em>一个LSR为某FEC分配标记当且仅当该LSR是MPLS网络的出口LER，或者该LSR收到某FEC目的地址前缀的下一跳LSR发来的对应此FEC的标记映射。</em></li></ul><h4 id="标记分发协议——LDP">标记分发协议——LDP</h4><p><em>是MPLS的控制协议，用于LSR之间交换信息，完成LSP的建立、维护和拆除等功能。</em></p><h4 id="标记信息库——LIB">标记信息库——LIB</h4><p><em>LSP的建立实质上就是在LSP的各个LSR的LIB中，记录某一FEC在交换节点的入出端口和入出标记的对应关系。</em></p><h4 id="标记映射">标记映射</h4><p><em>就是将标记分配给FEC，也叫标记绑定。一个FEC可以对应多个标记，但一个标记只能对应一个FEC。</em></p><h3 id="MPLS交换节点的结构">MPLS交换节点的结构</h3><img src="https://api2.mubu.com/v3/document_image/d87a6b5b-531f-4f11-8534-aeef7f3f3e12-1279996.jpg" alt="img" style="zoom:50%;" /><p>组成：</p><ul><li><strong>控制单元</strong></li><li><strong>转发单元</strong></li></ul><img src="https://api2.mubu.com/v3/document_image/7bdb4a07-18d7-45b2-b0c3-faebe0f4916b-1279996.jpg" alt="img" style="zoom:50%;" /><h3 id="MPLS的驱动方式">MPLS的驱动方式</h3><ul><li>拓扑驱动</li><li>请求驱动</li><li>数据驱动</li></ul><p>目前，在MPLS网络中，拓扑驱动应用的较为广泛。</p><h3 id="MPLS交换原理">MPLS交换原理</h3><h4 id="第一步——建立连接">第一步——建立连接</h4><p>假定所建立的LSP对应的转发等价类为FECx</p><h5 id="下游按需分配-2">下游按需分配</h5><img src="https://api2.mubu.com/v3/document_image/c16608a2-a2de-473b-b830-7fdc02f2efa2-1279996.jpg" alt="img" style="zoom:50%;" /><ul><li>由标准路由协议确定转发路由LER和LSR，在标记分发协议LDP控制下完成标记的<strong>下游按需分配</strong></li><li>入口LER0查找路由表，获得FECx的下一跳是LSR1，向LSR1发送<strong>标记</strong>请求</li><li>LSR1记录LER0的标记请求，并查找路由表，向下一跳LSR2发送<strong>标记</strong>请求</li><li>同理，LSR记录标记信息，并向下一跳LER1发送<strong>标记</strong>请求</li><li>出口LER1为FECx的LIB相应表项分配输入标记2，并将相应的路由信息填入改表项，通过端口5将<strong>标记</strong>2和FECx的映射发送给上游节点LSR2</li><li>LSR2从端口6接收到LER1发送的映射信息，将输出标记2填入相应LIB表项的输出字段，为FECx分配输入<strong>标记</strong>8填入相应LIB表项的输入字段，并将映射信息发送给上游节点LSR1</li><li>以此类推，LSR1将映射信息发送给入口LER0，LER0为FECx分配输出<strong>标记</strong>5并将相关信息填入LIB相应表项的输出字段，至此完成LSP的建立。</li></ul><h5 id="下游分配-2">下游分配</h5><ul><li>由标准路由协议确定转发路由LER和LSR，在标记分发协议LDP控制下完成标记的<strong>下游分配</strong></li><li>出口LER1为FECx的LIB相应表项分配输入标记2，并将相应的路由信息填入该表项，通过端口5将<strong>标记</strong>2和FECx的映射发送给上游节点LSR2</li><li>LSR2从端口6接收到LER1发送的映射信息，将输出标记2填入相应LIB表项的输出字段，为FECx分配输入<strong>标记</strong>8填入相应LIB表项的输入字段，并将映射信息发送给上游节点LSR1</li><li>以此类推，LSR1将映射信息发送给入口LER0，LER0将输出<strong>标记</strong>5和相关信息填入LIB相应表项的输出字段，至此完成LSP的建立。</li></ul><h5 id="上游分配-2">上游分配</h5><ul><li>由标准路由协议确定转发路由LER和LSR，在标记分发协议LDP控制下完成标记的<strong>上游分配</strong></li><li>入口LER0为FECx分配输出标记5并与相关信息一同填入LIB相关表项的输出字段，通过端口1将标记5和FECx的映射发送给下游节点LSR1</li><li>LSR1从端口7接收到LER0发送的映射，将标记5和相关信息填入FECx对应的LIB表项的输入字段，然后给FECx分配标记8并与相关信息一同填入对应表项的输出字段，最后通过端口3将标签8和FECx的映射发送给LSR2</li><li>以此类推，出口LER1接收到LSR发送的映射，将标签2填入LIB相应表项的输入字段，至此完成LSP的建立</li></ul><h4 id="第二步——数据传输-2">第二步——数据传输</h4><ul><li>入口LER0接收到数据分组后，将数据分组映射到LSP上，即映射为FECx；在添加SHIM垫片时分配标记5，然后封装成标记分组；最后通过端口1将标记分组转发给下一个节点LSR1</li><li>LSR1从端口7接收标记分组，并从SHIM垫片中获得输入标记5，通过查找LIB表得到输出端口3和输出标记8，用标记8替换标记5并从端口3转发给下一个节点LSR2</li><li>以此类推，直到出口LER1从端口5接收标记分组，从SHIM垫片中获得输入标记2，查找对应LIB表项得到输出标记为空，此时弹出标记，即将SHIM垫片取出，并将分组交给网络层通过路由表查找下一跳地址并转发。</li></ul><h4 id="第三步——拆除连接">第三步——拆除连接</h4><h5 id="1-采用计时器的方式拆除连接">1.采用计时器的方式拆除连接</h5><p>在生存时间内收到此标记的更新消息，则标记依然有效并更新定时器；否则，标记将被取消。</p><h5 id="2-不设置计时器">2.不设置计时器</h5><p>网络中拓扑结构发生变化或者网络某些链路出现故障等原因，可能促使LSR通过LDP消息取消标记，拆除LSP。</p><h2 id="MPLS相关技术简介">MPLS相关技术简介</h2><h3 id="服务质量QoS">服务质量QoS</h3><h4 id="1-综合服务模型">1.综合服务模型</h4><p>综合服务模型通过信令协议——<strong>资源预留协议</strong>（RSVP）在路径上各节点间协商QoS要求，并进行资源分配，从而建立传输通道。</p><h4 id="2-差分服务模型">2.差分服务模型</h4><p>在<strong>用户网络</strong>上仍采用<strong>RSVP协议</strong>，而在<strong>骨干网</strong>上则不再采用RSVP，这样就降低了路由器和网络的负担。</p><h3 id="流量工程">流量工程</h3><p>在MPLS流量工程中将采用**“基于约束的选路方式”**，也就是要根据业务所需要的资源和网络中可用的资源进行选路。</p><p>MPLS流量工程采用<strong>CR-LDP</strong>和<strong>扩展的RSVP控制协议</strong>创建并维护通过网络的隧道。运行<strong>IGP协议</strong>，在网络内交换链路状态，以确定网络中的可用资源。网络入口LER将根据资源请求和可用资源计算选取的隧道通路。</p>]]></content>
      
      
      <categories>
          
          <category> 专业课 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 交换与路由 </tag>
            
            <tag> 复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>交换与路由总复习第七章</title>
      <link href="/2021/06/09/%E4%BA%A4%E6%8D%A2%E4%B8%8E%E8%B7%AF%E7%94%B1%E6%80%BB%E5%A4%8D%E4%B9%A0%E7%AC%AC%E4%B8%83%E7%AB%A0/"/>
      <url>/2021/06/09/%E4%BA%A4%E6%8D%A2%E4%B8%8E%E8%B7%AF%E7%94%B1%E6%80%BB%E5%A4%8D%E4%B9%A0%E7%AC%AC%E4%B8%83%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1>ATM交换</h1><h2 id="基本原理">基本原理</h2><h3 id="为什么说-ATM-技术是融合了电路传送模式和分组传送模式的特点？">为什么说 ATM 技术是融合了电路传送模式和分组传送模式的特点？</h3><ul><li>ATM 技术是实现 B-ISDN 的核心技术， 它是以分组传送模式为基础并融合了电路传送模式的优点发展而来， 兼具分组传送模式分组交换的灵活性和电路传送模式面向连接的优点。</li></ul><h3 id="ATM交换的特点">ATM交换的特点</h3><ul><li>采用了固定长度的信元并简化了信头功能；</li><li>采用了异步时分复用方式；</li><li>采用了面向连接的工作方式；</li><li>采用了标准化的ATM协议。</li></ul><h2 id="ATM信元结构——特点1">ATM信元结构——特点1</h2><p><em>信元本质上类似分组交换的分组，但为了和分组区别，称为信元</em></p><img src="https://api2.mubu.com/v3/document_image/4e3f3863-1bd0-4235-87ef-ce56d0d28f85-1279996.jpg" alt="image" style="zoom:50%;" /><ul><li>ATM信元是<strong>固定长度</strong>的分组，固定长度<strong>53byte</strong>；</li><li>前5个字节为<strong>信头</strong>，后48个字节为<strong>净荷</strong>；</li></ul><h3 id="ATM信头结构">ATM信头结构</h3><ul><li>UNI（用户-网络接口）的ATM信头结构</li><li>NNI（网络节点接口）的ATM信头结构</li></ul><h4 id="UNI和NNI的信头结构对比">UNI和NNI的信头结构对比</h4><img src="https://api2.mubu.com/v3/document_image/6fb94f63-0a88-4738-90fd-ab4907051426-1279996.jpg" alt="image" style="zoom:80%;" /><ul><li>GFC：通用流量控制，用来在UNI接口上提供用户到网络方向上的流量控制。</li><li>VPI：虚通道标识。</li><li>VCI：虚信道标识。</li><li>PT：净荷类型，表示48字节的信息段所承载的信息类型。</li><li>CLP：信元丢弃优先权，当网络发生拥塞时，首先丢弃CLP=1的信元。</li><li>HEC：信头差错控制，用来检验信头在传输中是否出错。</li></ul><p><strong>其中， UNI 信元格式种包括 4bit 的 GFC， 而 NNI 信元格式中无需流量控制。</strong></p><h2 id="采样异步时分复用（ATD）方式——特点2">采样异步时分复用（ATD）方式——特点2</h2><h4 id="在信元中的VPI和VCI的作用">在信元中的VPI和VCI的作用</h4><p>在信元结构中， VPI 和 VCI 是最重要的两部分。 这两部分合起来构成一个信元的路由信息， 表示这个信元从哪里来， 到哪里去。 ATM 交换机就是根据各个信元上的 VPI 和 VCI来决定把它们送到哪一条线路上去。</p><h2 id="面向连接的工作方式——特点3">面向连接的工作方式——特点3</h2><h3 id="什么是VP（虚通道）和VC（虚信道）？它们的关系是什么？">什么是VP（虚通道）和VC（虚信道）？它们的关系是什么？</h3><ul><li>把一条ATM传输通道分割成速率不同的各个子信道，以适应不同的通信要求。这些子信道就是虚通道VP和虚信道VC。VP用信头中的VPI进行标识，VC用信头中的VCI进行标识。</li><li>将物理媒介划分为若干个子信道，称之为虚通道VP，又将 VP 子信道进一步划分为若干个子信道，称之为虚信道VC。</li></ul><h4 id="虚通道连接VPC和虚信道连接VCC、VP链路和VC链路、VPC端点和VCC端点">虚通道连接VPC和虚信道连接VCC、VP链路和VC链路、VPC端点和VCC端点</h4><img src="https://api2.mubu.com/v3/document_image/d8ebfb97-220d-4fa2-b3b4-d258680a03db-1279996.jpg" alt="image" style="zoom:50%;" /><h4 id="VP交换和VC交换的区别和联系">VP交换和VC交换的区别和联系</h4><p><strong>区别</strong></p><ul><li>VP交换是指仅变换VPI值而不改变VCI值的交换</li><li>VC交换是指VPI值与VCI值都要进行改变的交换。</li></ul><p><strong>联系</strong></p><ul><li>都是ATM中面向连接的交换方式</li><li>虚信道是按照虚通道来划分的，因此虚信道交换时，虚通道也要进行交换</li></ul><h4 id="虚信道连接VCC的两种建立方式">虚信道连接VCC的两种建立方式</h4><ul><li>永久虚连接PVC：通过预定或预分配的方法建立的永久或半永久连接，传送信息前不需要建立虚连接，结束时也不需要拆除连接。</li><li>交换虚连接SVC：传送信息前需要建立连接，在传送信息结束时需要拆除这个连接。</li></ul><h2 id="ATM协议参考模型——特点4">ATM协议参考模型——特点4</h2><img src="https://api2.mubu.com/v3/document_image/f5f87ed7-f438-42bf-a74d-442128e06ca7-1279996.jpg" alt="image" style="zoom:50%;" /><h3 id="ATM的由三个平面组成">ATM的由三个平面组成</h3><ul><li>**用户面：**负责用户信息的传送，采用分层结构；</li><li>**控制面：**提供与呼叫和连接有关的控制功能，涉及的主要是信令功能，控制面也具有分层结构；</li><li><strong>管理面：</strong><ul><li>**面管理：**实现了与整个系统有关的管理功能，并实现所有面之间的协调，面管理不分层</li><li>**层管理：**实现网络资源与协议参数的管理，并处理操作维护（OAM）信息，层管理采用分层结构。</li></ul></li></ul><h3 id="ATM协议参考模型中物理层的作用">ATM协议参考模型中物理层的作用</h3><p>ATM 参考模型中物理层负责通过物理媒体正确、 有效地传送信元。 为了实现信元无差错的传输， 物理层又被分为传输汇聚子层（TC） 和物理媒体子层（PM）， 它们分别保证在光、 电物理媒体和信号级上对信元的正确传送。</p><h3 id="ATM协议参考模型中ATM层的作用">ATM协议参考模型中ATM层的作用</h3><p>ATM 层的功能非常重要， 包括以下 4 种主要功能：</p><ul><li><strong>信元复用和解复用。</strong> 在源端点负责对来自各个虚连接的信元进行复用， 在目的端点对接收的信元流进行解复用。</li><li><strong>VPI/VCI 翻译。</strong> 负责在每个 ATM 节点对信头进行标记/识别， ATM 虚连接是通过 VPI和 VCI 来识别的。</li><li><strong>信头处理。</strong> 负责在源端点产生信头（除 HEC 域外）， 在目的端点翻译信头。</li><li><strong>一般流量控制。</strong> 在源端点负责产生 ATM 信头中的一般流量控制域， 而在接收点则依靠它来实现流量控制。</li></ul><h3 id="ATM适配层-AAL-支持的4种业务类型和特点，以及AAL4种协议类型和功能">ATM适配层(AAL)支持的4种业务类型和特点，以及AAL4种协议类型和功能</h3><p>根据：</p><ul><li><strong>业务的传输速率，即比特率（恒定、 可变）</strong></li><li><strong>信元和信宿之间定时关系（实时、 非实时）</strong></li><li><strong>连接方式（面向连接、 面向非连接）</strong></li></ul><p>上述三个业务特征参数，定义类<strong>4类业务</strong>：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">A类</th><th style="text-align:center">B类</th><th style="text-align:center">C类</th><th style="text-align:center">D类</th></tr></thead><tbody><tr><td style="text-align:center">信源与终端 的定时关系</td><td style="text-align:center">要求</td><td style="text-align:center">要求</td><td style="text-align:center">不要求</td><td style="text-align:center">不要求</td></tr><tr><td style="text-align:center">比特率</td><td style="text-align:center">固定</td><td style="text-align:center">可变</td><td style="text-align:center">可变</td><td style="text-align:center">可变</td></tr><tr><td style="text-align:center">连接方式</td><td style="text-align:center">面向连接</td><td style="text-align:center">面向连接</td><td style="text-align:center">面向连接</td><td style="text-align:center">无连接</td></tr><tr><td style="text-align:center">典型例子</td><td style="text-align:center">ATM网络 中传输的 64kbit/s 话音业务</td><td style="text-align:center">可变比特率的图象和音频业务</td><td style="text-align:center">面向连接的数据传送和信令传送业务</td><td style="text-align:center">无连接的数据传送 业务</td></tr></tbody></table><p>为了支持这四类业务，提出了<strong>四种AAL协议类型：</strong></p><ul><li><strong>AAL1</strong>——适用于恒定比特率业务**（A类）**， 该业务要求在源和目的地之间建立起虚连接之后， 以一个恒定的比特率来传递信息。 AAL1 的功能包括用户信息的分段与重组、 丢失和错误信元的处理、 信元到达时间的处理以及在接收端恢复源时钟频率。</li><li><strong>AAL2</strong>——适用于可变比特率信息的传送， 此外， 还在源和目的地之间传送定时信息。<strong>（B类）</strong></li><li><strong>AAL3/4</strong>——适用于数据传输， 这些数据对丢失敏感而对时延不敏感。 AAL3/4 具有可变长度用户数据的分段与重组及误码处理等功能。从应用层到达 CS 子层的报文最大可达 65535字节。 首先将其填充为 4 的整数倍字节。 接着加上头和尾信息。 在 CS 子层对报文进行了重构， 并加上了头和尾信息后， 便将报文传送给 SAR 子层， 由 SAR 子层将报文分为最大 44 字节的数据片。<strong>（C类和D类）</strong></li><li><strong>AAL5</strong>——适用于 ATM 信令， 提供高速的数据传送， 类似于简化了的 AAL3/4。 虽然 AAL3/4对每个报文只增加 4 字节的头信息， 但它还要为每个信元增加 4 字节的头信息， 因而使有效净荷的容量减少到 44 字节， 对于长的报文， 无效数据占 8%。 AAL5 的每个报文有一个稍大的尾部（8 字节）， 但每个信元无额外开销。 信元中没有顺序号， 可以通过长的校验和来弥补，从而可以检测丢失的、 误插的或错误的信元， 而不需要使用顺序号。 到目前为止， AAL 5 是实现最为广泛的 AAL。<strong>（C类）</strong></li></ul><h2 id="ATM交换技术">ATM交换技术</h2><h3 id="ATM交换完成的三个基本功能">ATM交换完成的三个基本功能</h3><h4 id="选路">选路</h4><p>选路就是选择物理端口的过程，即信元可以从某个入线端口交换到某个出线端口的过程，选路具有空间交换的特征。</p><h4 id="信头翻译">信头翻译</h4><p>将信元的输入信头值（入VPI/VCI）变换为输出信头值（出VPI/VCI）的过程。</p><h4 id="排队">排队</h4><p>给ATM交换网络设置一定数量的缓冲器，用来存储在竞争中失败的信元，避免信元的丢失。</p><h3 id="ATM交换系统">ATM交换系统</h3><h4 id="组成">组成</h4><ul><li>信元传输子系统<ul><li>交换网络</li><li>接口设备<ul><li>输入侧接口设备</li><li>输出侧接口设备</li></ul></li></ul></li><li>控制子系统</li></ul><h3 id="ATM交换网络">ATM交换网络</h3><h4 id="分类">分类</h4><ul><li>时分交换网络<ul><li>共享媒体</li><li>共享存储器</li></ul></li><li>空分交换网络<ul><li>单通路</li><li>多通路</li></ul></li></ul><h4 id="控制机机理">控制机机理</h4><h5 id="竞争">竞争</h5><p>每个时隙的宽度相当于一个信元的位置，交换网络的每条输入端口在一个时隙内只能发送一个信元。当每个输入端口在一个时隙内同时发送一个信元时，这些信元的目的地址按照VPI/VCI会随机分布到各个出线上去，就会出现竞争。</p><ul><li>出线竞争：指两个或两个以上信元同时交换到同一个输出端口，出线竞争不可消除</li><li>内部竞争：指两个或两个以上信元同时争用交换网络内部链路，可以消除</li></ul><h5 id="缓冲策略">缓冲策略</h5><ul><li>内部缓冲</li><li>外部缓冲</li></ul><h5 id="选路-2">选路</h5><ul><li>自由选路：自选路由方法的路由信息（翻译表）一般放在交换网络每个输入端口处。<br><img src="https://api2.mubu.com/v3/document_image/568ab4ad-e917-4455-a772-773f23b49cc8-1279996.jpg" alt="img" style="zoom: 50%;" /></li><li>表格控制选路：路由信息一般放在各个交换单元（SE）内部，各个SE按照自己的翻译表中的信息来完成选路。<br><img src="https://api2.mubu.com/v3/document_image/617a1528-240b-4176-b98b-cf5111b908ae-1279996.jpg" alt="img" style="zoom:50%;" /></li></ul>]]></content>
      
      
      <categories>
          
          <category> 专业课 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 交换与路由 </tag>
            
            <tag> 复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>交换与路由总复习第二章</title>
      <link href="/2021/06/08/%E4%BA%A4%E6%8D%A2%E4%B8%8E%E8%B7%AF%E7%94%B1%E6%80%BB%E5%A4%8D%E4%B9%A0%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
      <url>/2021/06/08/%E4%BA%A4%E6%8D%A2%E4%B8%8E%E8%B7%AF%E7%94%B1%E6%80%BB%E5%A4%8D%E4%B9%A0%E7%AC%AC%E4%BA%8C%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1>交换单元与交换网络</h1><h2 id="交换网络">交换网络</h2><ul><li>交换网络是交换设备的一个重要组成部分，用来提供交换所需的通路。由基本的交换单元组成。</li><li>交换网络中的信号形式是<strong>数字的</strong>、<strong>时分复用信号</strong>。</li><li><em>电路交换</em>采用<strong>同步时分复用信号</strong>，<em>分组交换</em>和<em>ATM交换</em>采用<strong>统计时分复用信号</strong></li></ul><h3 id="同步时分复用">同步时分复用</h3><ul><li>一帧同步时分复用信号为<strong>125<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">us</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">u</span><span class="mord mathnormal">s</span></span></span></span></strong>。</li><li>子信道是<strong>位置信道</strong>。</li><li>子信道的<strong>速率是恒定</strong>的。</li></ul><h3 id="统计时分复用">统计时分复用</h3><ul><li><strong>取消了帧</strong>的概念。</li><li>子信道是<strong>标志信道</strong>。</li><li>子信道的<strong>速率动态变换</strong>。</li></ul><h3 id="同步时分复用和统计时分复用的比较">同步时分复用和统计时分复用的比较</h3><ul><li>都是时分复用技术</li><li>同步时分复用的各子信道速率固定且相等；统计时分复用的各子信道速率动态变化，各不相同。</li><li>同步时分复用的子信道通过时间轴上的位置区分；统计时分复用的子信道通过标记区分。</li><li>统计时分复用的线路利用率好，可以满足综合业务的要求。同步时分复用实时性好。</li></ul><h2 id="话音信号的同步时分复用——PCM30-32帧结构">话音信号的同步时分复用——PCM30/32帧结构</h2><h3 id="PCM30-32帧的特点">PCM30/32帧的特点</h3><ul><li>一帧为125us，即周期为125us</li><li>一帧分为<strong>32个时隙</strong>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><msub><mi>S</mi><mn>0</mn></msub><mo>−</mo><mi>T</mi><msub><mi>S</mi><mn>32</mn></msub></mrow><annotation encoding="application/x-tex">TS_0-TS_{32}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">32</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><msub><mi>S</mi><mn>0</mn></msub><mtext>和</mtext><mi>T</mi><msub><mi>S</mi><mn>16</mn></msub></mrow><annotation encoding="application/x-tex">TS_0和TS_{16}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">和</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">16</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>分别为<strong>帧同步时隙</strong>和<strong>信令时隙</strong>，其余30路为话音信号</li><li>每个话路8bit，则传输码率为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>8</mn><mi>b</mi><mi>i</mi><mi>t</mi><mi mathvariant="normal">/</mi><mn>125</mn><mi>u</mi><mi>s</mi><mo>=</mo><mn>64</mn><mi>K</mi><mi>b</mi><mi>i</mi><mi>t</mi><mi mathvariant="normal">/</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">8bit/125us = 64Kbit/s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">8</span><span class="mord mathnormal">bi</span><span class="mord mathnormal">t</span><span class="mord">/125</span><span class="mord mathnormal">u</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">64</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord mathnormal">bi</span><span class="mord mathnormal">t</span><span class="mord">/</span><span class="mord mathnormal">s</span></span></span></span>。一帧的传输码率为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>64</mn><mi>K</mi><mi>b</mi><mi>i</mi><mi>t</mi><mi mathvariant="normal">/</mi><mi>s</mi><mo>×</mo><mn>32</mn><mo>=</mo><mn>2</mn><mi>M</mi><mi>b</mi><mi>i</mi><mi>t</mi><mi mathvariant="normal">/</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">64Kbit/s \times 32 = 2Mbit/s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">64</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord mathnormal">bi</span><span class="mord mathnormal">t</span><span class="mord">/</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">32</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">bi</span><span class="mord mathnormal">t</span><span class="mord">/</span><span class="mord mathnormal">s</span></span></span></span></li><li>16帧为一<strong>复帧</strong>，周期<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>125</mn><mi>u</mi><mi>s</mi><mo>×</mo><mn>16</mn><mo>=</mo><mn>2</mn><mi>m</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">125us\times 16 = 2ms</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">125</span><span class="mord mathnormal">u</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">16</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathnormal">m</span><span class="mord mathnormal">s</span></span></span></span></li><li>一个信道复用了32个时隙称为<strong>PCM基群。<strong>PCM基群可以进一步复用，形成</strong>PCM高次群。</strong></li></ul><h2 id="交换单元（同步时分复用）">交换单元（同步时分复用）</h2><p>同步时分复用信号的交换需要通过<strong>复用线的交换</strong>和<strong>时隙的交换</strong>来完成。</p><h3 id="复用线交换——空间接线器（S接线器）">复用线交换——空间接线器（S接线器）</h3><h4 id="组成">组成</h4><ul><li>交叉矩阵<br><img src="https://api2.mubu.com/v3/document_image/ca65f31b-dba6-4877-8436-3ecd6d12a76f-1279996.jpg" alt="image" style="zoom: 67%;" /></li><li>控制存储器：每一列是一个控制存储器，个数和控制方式有关，要看控制的出线或入线的个数<br><img src="https://api2.mubu.com/v3/document_image/be47bdc0-4c03-477f-ada9-322cc6afe56f-1279996.jpg" alt="image" style="zoom:67%;" /></li></ul><h4 id="工作方式">工作方式</h4><ul><li>输入控制：控制存储器上方标注入线序号，表格内填出线序号，左边填时隙</li><li>输出控制：控制存储器上方标注出线序号，表格内填入线序号，左边填时隙</li></ul><h3 id="时隙交换——时间接线器（T接线器）">时隙交换——时间接线器（T接线器）</h3>]]></content>
      
      
      <categories>
          
          <category> 专业课 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 交换与路由 </tag>
            
            <tag> 复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动通信作业1</title>
      <link href="/2021/06/08/%E7%A7%BB%E5%8A%A8%E9%80%9A%E4%BF%A1%E4%BD%9C%E4%B8%9A1/"/>
      <url>/2021/06/08/%E7%A7%BB%E5%8A%A8%E9%80%9A%E4%BF%A1%E4%BD%9C%E4%B8%9A1/</url>
      
        <content type="html"><![CDATA[<h1>作业1</h1><h2 id="1-简述移动信道中电波传播的方式及其特点">1.简述移动信道中电波传播的方式及其特点</h2><h3 id="电波的传播方式">电波的传播方式</h3><ul><li>直射波</li><li>反射波</li><li>散射波</li><li>绕射波</li></ul><h3 id="移动信道中电波传播的特点">移动信道中电波传播的特点</h3><p>主要特点是<strong>信号衰落</strong>，包括：</p><ul><li>与传播距离相关的<strong>路径损耗</strong></li><li>收地形地貌影响的<strong>慢衰落损耗</strong></li><li>收多径效应等影响的<strong>快衰落损耗</strong></li></ul><h2 id="2-试推导收、发天线均为方向性天线时，以dB为单位的自由空间传播损耗表达式。（注意：传播距离单位为m，频率单位为Hz）">2.试推导收、发天线均为方向性天线时，以dB为单位的自由空间传播损耗表达式。（注意：传播距离单位为m，频率单位为Hz）</h2><ul><li>设发射功率为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mi>T</mi></msub></mrow><annotation encoding="application/x-tex">P_T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,方向性发射天线的增益分别为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>G</mi><mi>T</mi></msub></mrow><annotation encoding="application/x-tex">G_T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>则距离辐射源<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span></span></span></span>处的无线电波功率密度：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo>=</mo><mfrac><mrow><msub><mi>P</mi><mi>T</mi></msub><msub><mi>G</mi><mi>T</mi></msub></mrow><mrow><mn>4</mn><mi>π</mi><msup><mi>d</mi><mn>2</mn></msup></mrow></mfrac><mo stretchy="false">(</mo><mi>W</mi><mi mathvariant="normal">/</mi><msup><mi>m</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S = \frac{P_T G_T}{4\pi d^2}(W/m^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2336359999999997em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8886359999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.410305em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathnormal mtight">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li><li>设接收端天线的等效面积为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mi>R</mi></msub></mrow><annotation encoding="application/x-tex">A_R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，增益为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>G</mi><mi>R</mi></msub></mrow><annotation encoding="application/x-tex">G_R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，则接收段天线接收到的功率为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mi>R</mi></msub><mo>=</mo><mi>S</mi><msub><mi>A</mi><mi>R</mi></msub><mo>=</mo><mfrac><mrow><msub><mi>P</mi><mi>T</mi></msub><msub><mi>G</mi><mi>T</mi></msub><msub><mi>A</mi><mi>R</mi></msub></mrow><mrow><mn>4</mn><mi>π</mi><msup><mi>d</mi><mn>2</mn></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">P_R=SA_R=\frac{P_TG_TA_R}{4\pi d^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2336359999999997em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8886359999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.410305em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathnormal mtight">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathnormal mtight">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li><li>由于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mi>R</mi></msub><mo>=</mo><mfrac><mrow><msup><mi>λ</mi><mn>2</mn></msup><msub><mi>G</mi><mi>R</mi></msub></mrow><mrow><mn>4</mn><mi>π</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">A_R=\frac{\lambda^2G_R}{4\pi}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3792249999999997em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0342249999999997em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.410305em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">λ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathnormal mtight">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，故<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mi>R</mi></msub><mo>=</mo><msub><mi>P</mi><mi>T</mi></msub><msub><mi>G</mi><mi>T</mi></msub><msub><mi>G</mi><mi>R</mi></msub><mo stretchy="false">(</mo><mfrac><mi>λ</mi><mrow><mn>4</mn><mi>π</mi><mi>d</mi></mrow></mfrac><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">P_R=P_TG_TG_R(\frac{\lambda}{4\pi d})^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span><span class="mord mathnormal mtight">d</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">λ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></li><li>路径损耗：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mrow><mi>f</mi><mi>s</mi></mrow></msub><mo>=</mo><mfrac><msub><mi>P</mi><mi>T</mi></msub><msub><mi>P</mi><mi>R</mi></msub></mfrac><mo>=</mo><mfrac><mn>1</mn><mrow><msub><mi>G</mi><mi>T</mi></msub><msub><mi>G</mi><mi>R</mi></msub></mrow></mfrac><mo stretchy="false">(</mo><mfrac><mrow><mn>4</mn><mi>π</mi><mi>d</mi></mrow><mi>λ</mi></mfrac><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">L_{fs}=\frac{P_T}{P_R}=\frac{1}{G_TG_R}(\frac{4\pi d}{\lambda})^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3339409999999998em;vertical-align:-0.44530499999999995em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8886359999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.410305em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44530499999999995em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3254129999999997em;vertical-align:-0.44530499999999995em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathnormal mtight">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44530499999999995em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">λ</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></li><li>则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo fence="true">[</mo><msub><mi>L</mi><mrow><mi mathvariant="normal">f</mi><mi mathvariant="normal">s</mi></mrow></msub><mo fence="true">]</mo></mrow><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">d</mi><mi mathvariant="normal">B</mi></mrow><mo stretchy="false">)</mo><mo>=</mo><mn>32.44</mn><mo>+</mo><mn>20</mn><mi>log</mi><mo>⁡</mo><mi>d</mi><mo stretchy="false">(</mo><mrow><mtext> </mtext><mi mathvariant="normal">k</mi><mi mathvariant="normal">m</mi></mrow><mo stretchy="false">)</mo><mo>+</mo><mn>20</mn><mi>log</mi><mo>⁡</mo><mi>f</mi><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">M</mi><mi mathvariant="normal">H</mi><mi mathvariant="normal">z</mi></mrow><mo stretchy="false">)</mo><mo>−</mo><mn>10</mn><mi>log</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><msub><mi mathvariant="normal">G</mi><mi mathvariant="normal">T</mi></msub><mo fence="true">)</mo></mrow><mo>−</mo><mn>10</mn><mi>log</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><msub><mi mathvariant="normal">G</mi><mi mathvariant="normal">R</mi></msub><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\left[L_{\mathrm{fs}}\right](\mathrm{dB})=32.44+20 \log d(\mathrm{~km})+20 \log f(\mathrm{MHz})-10 \log \left(\mathrm{G}_{\mathrm{T}}\right)-10 \log \left(\mathrm{G}_{\mathrm{R}}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">fs</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">]</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathrm">dB</span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">32.44</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">20</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord"><span class="mspace nobreak"> </span><span class="mord mathrm">km</span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">20</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathrm">MHz</span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">10</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathrm">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">10</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathrm">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">R</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></li><li>由于距离单位是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span>，频率单位是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>z</mi></mrow><annotation encoding="application/x-tex">Hz</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">Hz</span></span></span></span>，故<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.2500em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow><mo fence="true">[</mo><msub><mi>L</mi><mrow><mi mathvariant="normal">f</mi><mi mathvariant="normal">s</mi></mrow></msub><mo fence="true">]</mo></mrow><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">d</mi><mi mathvariant="normal">B</mi></mrow><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>32.44</mn><mo>+</mo><mn>20</mn><mi>log</mi><mo>⁡</mo><mi>d</mi><mo stretchy="false">(</mo><mrow><mtext> </mtext><mi mathvariant="normal">m</mi></mrow><mo stretchy="false">)</mo><mo>+</mo><mn>60</mn><mo>+</mo><mn>20</mn><mi>log</mi><mo>⁡</mo><mi>f</mi><mo stretchy="false">(</mo><mrow><mtext> </mtext><mi mathvariant="normal">H</mi><mi mathvariant="normal">z</mi></mrow><mo stretchy="false">)</mo><mo>+</mo><mn>120</mn><mo>−</mo><mn>10</mn><mi>log</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><msub><mi mathvariant="normal">G</mi><mi mathvariant="normal">T</mi></msub><mo fence="true">)</mo></mrow><mo>−</mo><mn>10</mn><mi>log</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><msub><mi mathvariant="normal">G</mi><mi mathvariant="normal">R</mi></msub><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>212.44</mn><mo>+</mo><mn>20</mn><mi>log</mi><mo>⁡</mo><mi>d</mi><mo stretchy="false">(</mo><mrow><mtext> </mtext><mi mathvariant="normal">m</mi></mrow><mo stretchy="false">)</mo><mo>+</mo><mn>20</mn><mi>log</mi><mo>⁡</mo><mi>f</mi><mo stretchy="false">(</mo><mrow><mtext> </mtext><mi mathvariant="normal">H</mi><mi mathvariant="normal">z</mi></mrow><mo stretchy="false">)</mo><mo>−</mo><mn>10</mn><mi>log</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><msub><mi mathvariant="normal">G</mi><mi mathvariant="normal">T</mi></msub><mo fence="true">)</mo></mrow><mo>−</mo><mn>10</mn><mi>log</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><msub><mi mathvariant="normal">G</mi><mi mathvariant="normal">R</mi></msub><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}\left[L_{\mathrm{fs}}\right](\mathrm{dB}) &amp;=32.44+20 \log d(\mathrm{~m})+60+20 \log f(\mathrm{~Hz})+120-10 \log \left(\mathrm{G}_{\mathrm{T}}\right)-10 \log \left(\mathrm{G}_{\mathrm{R}}\right) \\ &amp;=212.44+20 \log d(\mathrm{~m})+20 \log f(\mathrm{~Hz})-10 \log \left(\mathrm{G}_{\mathrm{T}}\right)-10 \log \left(\mathrm{G}_{\mathrm{R}}\right) \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0000000000000004em;vertical-align:-1.2500000000000002em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">fs</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">]</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathrm">dB</span></span><span class="mclose">)</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">32.44</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">20</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord"><span class="mspace nobreak"> </span><span class="mord mathrm">m</span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">60</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">20</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mspace nobreak"> </span><span class="mord mathrm">Hz</span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">120</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">10</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathrm">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">10</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathrm">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">R</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">212.44</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">20</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord"><span class="mspace nobreak"> </span><span class="mord mathrm">m</span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">20</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mspace nobreak"> </span><span class="mord mathrm">Hz</span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">10</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathrm">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">10</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathrm">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">R</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span></span></span></span></span></span></li></ul><h2 id="3-假设d-1-10km-d-2-5km，工作频率为450MHz，-x-82m，试求电波传播损耗值。">3.假设<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mn>1</mn></msub><mo>=</mo><mn>10</mn><mi>k</mi><mi>m</mi><mo separator="true">,</mo><msub><mi>d</mi><mn>2</mn></msub><mo>=</mo><mn>5</mn><mi>k</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">d_1=10km,d_2=5km</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">10</span><span class="mord mathnormal">km</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">5</span><span class="mord mathnormal">km</span></span></span></span>，工作频率为450MHz，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mn>82</mn><mi>m</mi></mrow><annotation encoding="application/x-tex">|x|=82m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">82</span><span class="mord mathnormal">m</span></span></span></span>，试求电波传播损耗值。</h2><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>λ</mi><mo>=</mo><mfrac><mi>c</mi><mi>f</mi></mfrac><mo>=</mo><mn>0.667</mn><mi>m</mi></mrow><annotation encoding="application/x-tex">\lambda=\frac{c}{f}=0.667m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">λ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1764999999999999em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0.667</span><span class="mord mathnormal">m</span></span></span></span></li><li>第一菲涅尔半径<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>=</mo><msqrt><mfrac><mrow><mi>λ</mi><msub><mi>d</mi><mn>1</mn></msub><msub><mi>d</mi><mn>2</mn></msub></mrow><mrow><msub><mi>d</mi><mn>1</mn></msub><mo>+</mo><msub><mi>d</mi><mn>2</mn></msub></mrow></mfrac></msqrt><mo>=</mo><mn>47.15</mn><mi>m</mi></mrow><annotation encoding="application/x-tex">x_1=\sqrt{\frac{\lambda d_1d_2}{d_1+d_2}}=47.15m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.8400000000000003em;vertical-align:-0.6294460000000001em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2105540000000001em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8962079999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4101em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">λ</span><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.1705539999999997em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.8800000000000001em;"><svg width='400em' height='1.8800000000000001em' viewBox='0 0 400000 1944' preserveAspectRatio='xMinYMin slice'><path d='M983 90l0 -0c4,-6.7,10,-10,18,-10 H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6294460000000001em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">47.15</span><span class="mord mathnormal">m</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">/</mi><msub><mi>x</mi><mn>1</mn></msub><mo>=</mo><mi mathvariant="normal">∣</mi><mn>1.739</mn><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|x|/x_1=|1.739|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mord">∣/</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣1.739∣</span></span></span></span>，当有障碍物时为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mn>1.739</mn></mrow><annotation encoding="application/x-tex">-1.739</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1.739</span></span></span></span>，绕射损耗大约为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>21</mn><mi>d</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">21dB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">21</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>，没有障碍物时&gt;0，绕射损耗约为0</li></ul><h2 id="4-对比快衰落和慢衰落的成因和特点">4.对比快衰落和慢衰落的成因和特点</h2><h4 id="成因">成因</h4><ul><li>**快衰落：**信道中的反射物和散射物导致发射波到达接收机时形成在时间、空间上相互区别的多个无线电波。 不同多径成分具有的随机相位和幅度引起信号幅度波动。</li><li>**慢衰落：**移动中的移动台或接收天线随时间、地点、地形变化受到阴影效应的影响，信号电平中值发生的衰落</li></ul><h4 id="特点">特点</h4><ul><li>**快衰落：**发生在小尺度范围内的信号衰减，可以通过均衡技术等进行“抗衰落”；</li><li>**慢衰落：**发生在大尺度范围内的信号衰减，可以通过“衰落储备“避免通信的中断。</li></ul><h2 id="5-采用双射线信道模型，分析多径效应在频域上对信道的影响。">5.采用双射线信道模型，分析多径效应在频域上对信道的影响。</h2><img src=".\images\image-20210608190851125.png" alt="image-20210608195100999" style="zoom:67%;" /><img src=".\images\image-20210608190947512.png" alt="image-20210608195100999" style="zoom:67%;" /><img src=".\images\image-20210608191002259.png" alt="image-20210608195100999" style="zoom:67%;" />]]></content>
      
      
      <categories>
          
          <category> 专业课 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动通信 </tag>
            
            <tag> 作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>707. 设计链表</title>
      <link href="/2021/06/07/707-%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/"/>
      <url>/2021/06/07/707-%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1><a href="https://leetcode-cn.com/problems/design-linked-list/">707. 设计链表</a></h1><h2 id="题目">题目</h2><p>设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：val 和 next。val 是当前节点的值，next 是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性 prev 以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。</p><p>在链表类中实现这些功能：</p><ul><li><em>get(index)</em>：获取链表中第 <code>index</code> 个节点的值。如果索引无效，则返回<code>-1</code>。</li><li><em>addAtHead(val)</em>：在链表的第一个元素之前添加一个值为 <code>val</code> 的节点。插入后，新节点将成为链表的第一个节点。</li><li><em>addAtTail(val)</em>：将值为 <code>val</code> 的节点追加到链表的最后一个元素。</li><li><em>addAtIndex(index,val)</em>：在链表中的第 index 个节点之前添加值为 val  的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果index小于0，则在头部插入节点。</li><li><em>deleteAtIndex(index)</em>：如果索引 <code>index</code> 有效，则删除链表中的第 <code>index</code> 个节点。</li></ul><p><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MyLinkedList linkedList = new MyLinkedList();</span><br><span class="line">linkedList.addAtHead(1);</span><br><span class="line">linkedList.addAtTail(3);</span><br><span class="line">linkedList.addAtIndex(1,2);   //链表变为1-&gt; 2-&gt; 3</span><br><span class="line">linkedList.get(1);            //返回2</span><br><span class="line">linkedList.deleteAtIndex(1);  //现在链表是1-&gt; 3</span><br><span class="line">linkedList.get(1);            //返回3</span><br></pre></td></tr></table></figure><h2 id="思路">思路</h2><h3 id="方法一-单向链表">方法一 单向链表</h3><h4 id="单向链表的节点">单向链表的节点</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,val</span>):</span></span><br><span class="line">        self.val = val</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br></pre></td></tr></table></figure><h4 id="单向链表节点的增加">单向链表节点的增加</h4><ul><li>找到插入位置的前一个节点cur</li><li>将插入节点的next指向cur节点的下一个节点</li><li>将cur节点的下一个节点指向插入节点</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">newNode = Node(val)</span><br><span class="line">newNode.<span class="built_in">next</span> = cur.<span class="built_in">next</span></span><br><span class="line">cur.<span class="built_in">next</span> = newNode</span><br></pre></td></tr></table></figure><p><img src="https://camo.githubusercontent.com/b91201cef2d688461b78fdf0c0f7c615bb9978a8cbb77dbb3882a57fc5be8780/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f32303230303830363139353133343333312e706e67" alt="链表-添加节点"></p><h4 id="单向链表节点的删除">单向链表节点的删除</h4><ul><li>找到删除节点的前一个节点cur</li><li>将cur节点指向待删除节点的下一个节点</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cur.<span class="built_in">next</span> = cur.<span class="built_in">next</span>.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><h4 id="完整代码">完整代码</h4><ul><li>插入和删除的方法直接按照上述逻辑来就行，容易出错的是cur指针是否指向正确的节点</li><li>先定义一个虚拟头节点(哑节点)会更容易处理问题，可以简化对头节点的操作</li><li>增加头节点和尾节点的方法不必要直接写，可以通过插入函数<em>addAtIndex(0,val)</em>，*addAtIndex(self.count,val)*来间接实现，count是节点数量(不包括哑节点)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,val</span>):</span></span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">        self.val = val</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLinkedList</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.head = Node(-<span class="number">1</span>)</span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, index</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Get the value of the index-th node in the linked list. If the index is invalid, return -1.</span></span><br><span class="line"><span class="string">        :type index: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> index&gt;=<span class="number">0</span> <span class="keyword">and</span> index&lt;self.count:</span><br><span class="line">            cur = self.head.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(index):</span><br><span class="line">                cur = cur.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">return</span> cur.val</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addAtHead</span>(<span class="params">self, val</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.</span></span><br><span class="line"><span class="string">        :type val: int</span></span><br><span class="line"><span class="string">        :rtype: None</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.addAtIndex(<span class="number">0</span>,val)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addAtTail</span>(<span class="params">self, val</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Append a node of value val to the last element of the linked list.</span></span><br><span class="line"><span class="string">        :type val: int</span></span><br><span class="line"><span class="string">        :rtype: None</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.addAtIndex(self.count,val)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addAtIndex</span>(<span class="params">self, index, val</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.</span></span><br><span class="line"><span class="string">        :type index: int</span></span><br><span class="line"><span class="string">        :type val: int</span></span><br><span class="line"><span class="string">        :rtype: None</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> index &gt;= <span class="number">0</span> <span class="keyword">and</span> index &lt;= self.count:</span><br><span class="line">            cur = self.head</span><br><span class="line">            newNode = Node(val)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(index):</span><br><span class="line">                cur = cur.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">if</span> cur.<span class="built_in">next</span> == <span class="literal">None</span>:</span><br><span class="line">                cur.<span class="built_in">next</span> = newNode</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                newNode.<span class="built_in">next</span> = cur.<span class="built_in">next</span></span><br><span class="line">                cur.<span class="built_in">next</span> = newNode</span><br><span class="line">        self.count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteAtIndex</span>(<span class="params">self, index</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Delete the index-th node in the linked list, if the index is valid.</span></span><br><span class="line"><span class="string">        :type index: int</span></span><br><span class="line"><span class="string">        :rtype: None</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> index&gt;=<span class="number">0</span> <span class="keyword">and</span> index&lt;self.count:</span><br><span class="line">            cur = self.head</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(index):</span><br><span class="line">                cur = cur.<span class="built_in">next</span></span><br><span class="line">            cur.<span class="built_in">next</span> = cur.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            self.count -= <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="方法二-双向链表">方法二 双向链表</h3><p>双向链表要比单向链表快的多，因为可以通过判断索引index的位置靠近头部还是尾部来决定是从头节点还是尾节点来搜索待查找的节点。</p><h4 id="双向链表的节点">双向链表的节点</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,val</span>):</span></span><br><span class="line">        self.val = val</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">        self.prev = <span class="literal">None</span></span><br></pre></td></tr></table></figure><h4 id="双向链表节点的增加">双向链表节点的增加</h4><ul><li>找到插入位置的前一个节点cur</li><li>将新节点的next指向cur节点的next</li><li>将cur节点的下一个节点的prev指向新节点</li><li>将cur节点的next指向新节点</li><li>将新节点的prev指向cur节点</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">newNode = Node(val)</span><br><span class="line"></span><br><span class="line">newNode.<span class="built_in">next</span> = cur.<span class="built_in">next</span></span><br><span class="line">cur.<span class="built_in">next</span>.prev = newNode</span><br><span class="line">cur.<span class="built_in">next</span> = newNode</span><br><span class="line">newNode.prev = cur</span><br></pre></td></tr></table></figure><p><img src="https://pic.leetcode-cn.com/b4e5057ef258b98ea66252cd168cae535419161b28a6d6e5859c405e5585eb1b-file_1578973150914" alt="在这里插入图片描述"></p><h4 id="双向链表节点的删除">双向链表节点的删除</h4><ul><li>找到待删除节点的前一个节点cur</li><li>将节点cur的next指向待删除节点的next</li><li>将待删除节点的下一个节点（由于上一步，此时也是cur的下一个节点）的prev指向cur</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cur.<span class="built_in">next</span> = cur.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">cur.<span class="built_in">next</span>.prve = cur</span><br></pre></td></tr></table></figure><p><img src="https://pic.leetcode-cn.com/323a5bf16db256a4267fb8e379606ab54f73e9f6c95db4980f4fdd5bf4f57a08-file_1578973150887" alt="在这里插入图片描述"></p><h4 id="完整代码-2">完整代码</h4><ul><li>双向链表明显比单向链表更快</li><li>双向链表可以设置虚拟的头节点和尾节点来简化代码</li><li>关键步骤依旧是找到待增加/删除位置的前一个节点，然后进行对应得增加、删除或取值操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,val</span>):</span></span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">        self.pre = <span class="literal">None</span></span><br><span class="line">        self.val = val</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLinkedList</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.head = Node(-<span class="number">1</span>)</span><br><span class="line">        self.tail = Node(-<span class="number">1</span>)</span><br><span class="line">        self.head.<span class="built_in">next</span> = self.tail</span><br><span class="line">        self.tail.pre = self.head</span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, index</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Get the value of the index-th node in the linked list. If the index is invalid, return -1.</span></span><br><span class="line"><span class="string">        :type index: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> index&lt;<span class="number">0</span> <span class="keyword">or</span> index&gt;=self.count:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> index&lt;self.count/<span class="number">2</span>:</span><br><span class="line">            cur = self.head</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(index+<span class="number">1</span>):</span><br><span class="line">                cur = cur.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cur = self.tail</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(self.count-index):</span><br><span class="line">                cur = cur.pre</span><br><span class="line">        <span class="keyword">return</span> cur.val</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addAtHead</span>(<span class="params">self, val</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.</span></span><br><span class="line"><span class="string">        :type val: int</span></span><br><span class="line"><span class="string">        :rtype: None</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.addAtIndex(<span class="number">0</span>,val)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addAtTail</span>(<span class="params">self, val</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Append a node of value val to the last element of the linked list.</span></span><br><span class="line"><span class="string">        :type val: int</span></span><br><span class="line"><span class="string">        :rtype: None</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.addAtIndex(self.count,val)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addAtIndex</span>(<span class="params">self, index, val</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.</span></span><br><span class="line"><span class="string">        :type index: int</span></span><br><span class="line"><span class="string">        :type val: int</span></span><br><span class="line"><span class="string">        :rtype: None</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> index&gt;self.count:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> index&lt;<span class="number">0</span>:</span><br><span class="line">            index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> index&lt;self.count/<span class="number">2</span>:</span><br><span class="line">            cur=self.head</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(index):</span><br><span class="line">                cur = cur.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cur = self.tail</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(self.count-index+<span class="number">1</span>):</span><br><span class="line">                cur = cur.pre</span><br><span class="line">        </span><br><span class="line">        newNode = Node(val)</span><br><span class="line">        newNode.<span class="built_in">next</span> = cur.<span class="built_in">next</span></span><br><span class="line">        cur.<span class="built_in">next</span>.pre = newNode</span><br><span class="line">        cur.<span class="built_in">next</span> = newNode</span><br><span class="line">        newNode.pre = cur</span><br><span class="line">        </span><br><span class="line">        self.count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteAtIndex</span>(<span class="params">self, index</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Delete the index-th node in the linked list, if the index is valid.</span></span><br><span class="line"><span class="string">        :type index: int</span></span><br><span class="line"><span class="string">        :rtype: None</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> index&gt;=self.count <span class="keyword">or</span> index&lt;<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> index&lt;self.count/<span class="number">2</span>:</span><br><span class="line">            cur=self.head</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(index):</span><br><span class="line">                cur = cur.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cur = self.tail</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(self.count-index+<span class="number">1</span>):</span><br><span class="line">                cur = cur.pre</span><br><span class="line">                </span><br><span class="line">        cur.<span class="built_in">next</span> = cur.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">        cur.<span class="built_in">next</span>.pre = cur</span><br><span class="line">        self.count -= <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="Reference">Reference</h2><p><a href="https://leetcode-cn.com/problems/design-linked-list/solution/she-ji-lian-biao-by-leetcode/">设计链表 - 设计链表 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p><a href="https://github.com/youngyangyang04/leetcode-master/blob/master/problems/0707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.md">leetcode-master/0707.设计链表.md at master · youngyangyang04/leetcode-master (github.com)</a></p><h2 id="Postscript">Postscript</h2><p>Sentinel：本意是哨兵，在这是哨兵节点</p><p>Sentinel head：也就是虚拟头节点</p><p>Sentinel tail：虚拟尾节点</p><p>prev：previous的缩写，指向前一个节点</p><p>next：指向后一个节点</p><p>pred：predecessor前一个节点</p><p>succ：successor后一个节点</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>206. 反转链表</title>
      <link href="/2021/06/06/206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
      <url>/2021/06/06/206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1>206.反转链表</h1><h2 id="题目">题目</h2><p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p><p><strong>示例一</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5]</span><br><span class="line">输出：[5,4,3,2,1]</span><br></pre></td></tr></table></figure><p><strong>示例二</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2]</span><br><span class="line">输出：[2,1]</span><br></pre></td></tr></table></figure><p><strong>示例三</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><h2 id="思路">思路</h2><h3 id="方法一：迭代-三指针">方法一：迭代+三指针</h3><p>需要三个指针(有些题解叫双指针，但我感觉三指针更准确些)pre、cur、nex分别指向前一个节点、当前节点和下一个节点。</p><p>pre初始值None，cur初始指着头节点、nex初始则是头节点的下一个节点。</p><p>每次操作如下：</p><ul><li>cur将下一个节点指向pre，实现局部的链表反转</li><li>pre和cur往后移动一个节点</li><li>nex是一个临时存储节点的变量。第一步cur将下一个节点指向pre时会失去移动的方向，这个时候就直接用nex来帮助cur移动</li></ul><p><img src="https://camo.githubusercontent.com/36cf9298bccf54091dbcabb9ede884bf98d5b2f6f04bd89a36ac2904b26d0971/68747470733a2f2f747661312e73696e61696d672e636e2f6c617267652f30303865476d5a456c7931676e7266316f626f757067333067793063343471702e676966" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseList</span>(<span class="params">self, head</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        pre = <span class="literal">None</span></span><br><span class="line">        cur = head</span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">            nex = cur.<span class="built_in">next</span></span><br><span class="line">            cur.<span class="built_in">next</span> = pre</span><br><span class="line">            pre = cur</span><br><span class="line">            cur = nex</span><br><span class="line">        <span class="keyword">return</span> pre</span><br></pre></td></tr></table></figure><ul><li>时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></li><li>空间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></li></ul><p><strong>评论区大佬的超级精简版</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseList</span>(<span class="params">self, head</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        p, rev = head, <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> p:</span><br><span class="line">            rev, rev.<span class="built_in">next</span>, p = p, rev, p.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> rev</span><br></pre></td></tr></table></figure><h3 id="方法二：递归">方法二：递归</h3><p>做了几题发现，链表使用递归是比较常见的作法。</p><p>有几个问题(我遇到的)需要注意：</p><ul><li>递归反转如何避免成环。</li><li>新的头节点怎么找到。</li></ul><p>考虑上述问题后的步骤：</p><ul><li><p>递归到最后一个节点，将该节点设置为新的头节点，并作为函数的返回值</p></li><li><p>在回溯的过程中，将当前节点的下一个节点的next指针指向当前节点实现反转</p></li><li><p>为了避免成环，将当前节点的下一个节点(此时还指向原来的下一个节点)指向None/null(缺少这一步，在回溯过程结束时会导致原链表的头节点区域成环，比如应该是1&lt;-2&lt;-3&lt;-4&lt;-5，结果是1&lt;-&gt;2&lt;-3&lt;-4&lt;-5，这样程序就困在环里直到超时)</p><p><img src="https://pic.leetcode-cn.com/8951bc3b8b7eb4da2a46063c1bb96932e7a69910c0a93d973bd8aa5517e59fc8.gif" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseList</span>(<span class="params">self, head</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> head==<span class="literal">None</span> <span class="keyword">or</span> head.<span class="built_in">next</span>==<span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        newhead = self.reverseList(head.<span class="built_in">next</span>)</span><br><span class="line">        head.<span class="built_in">next</span>.<span class="built_in">next</span> = head</span><br><span class="line">        head.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> newhead</span><br></pre></td></tr></table></figure><p><strong>需要注意newhead这个节点，在最后一次迭代得到了新的头节点后，在回溯过程中是不变的。</strong></p><ul><li>时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></li><li>空间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></li></ul></li></ul><h2 id="Reference">Reference</h2><p><a href="https://leetcode-cn.com/problems/reverse-linked-list/solution/fan-zhuan-lian-biao-shuang-zhi-zhen-di-gui-yao-mo-/">【反转链表】：双指针，递归，妖魔化的双指针 - 反转链表 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p><a href="https://github.com/youngyangyang04/leetcode-master/blob/master/problems/0206.%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.md">leetcode-master/0206.翻转链表.md at master · youngyangyang04/leetcode-master (github.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>203. 移除链表元素</title>
      <link href="/2021/06/05/203-%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/"/>
      <url>/2021/06/05/203-%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h1><a href="https://leetcode-cn.com/problems/remove-linked-list-elements/">203. 移除链表元素</a></h1><h2 id="题目">题目</h2><p>给你一个链表的头节点 <code>head</code> 和一个整数 <code>val</code> ，请你删除链表中所有满足 <code>Node.val == val</code> 的节点，并返回 <strong>新的头节点</strong> 。</p><p><img src="https://assets.leetcode.com/uploads/2021/03/06/removelinked-list.jpg" alt="img"></p><p><strong>示例一</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,6,3,4,5,6], val = 6</span><br><span class="line">输出：[1,2,3,4,5]</span><br></pre></td></tr></table></figure><p><strong>示例二</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [], val = 1</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例三</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [7,7,7,7], val = 7</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><h2 id="思路">思路</h2><h3 id="方法1-1：设置哑节点-dummy-，然后直接迭代">方法1-1：设置哑节点(dummy)，然后直接迭代</h3><p>哑节点是一个虚拟的头节点，在这一题里面，头节点是可能被删除的，删除后的头节点还要考虑需不需要删除；或者当指针往后迭代的过程中，头节点就找不到了，没办法之间返回头节点，这个时候设置哑节点可以有效的解决这些麻烦。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeElements</span>(<span class="params">self, head, val</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :type val: int</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        vhead = ListNode(-<span class="number">1</span>,head)<span class="comment">#设置哑节点</span></span><br><span class="line">        p = vhead<span class="comment">#这是移动指针，指向当前要处理的节点</span></span><br><span class="line">        <span class="keyword">if</span> p == <span class="literal">None</span>: <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> p.<span class="built_in">next</span> != <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> (p.<span class="built_in">next</span>).val == val:</span><br><span class="line">                p.<span class="built_in">next</span> = (p.<span class="built_in">next</span>).<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                p = p.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> vhead.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><ul><li>时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></li><li>空间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></li></ul><h3 id="方法1-2：还是设置哑节点-双指针">方法1-2：还是设置哑节点+双指针</h3><p>和方法1-1没啥区别，个人感觉双指针直观上好理解一点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeElements</span>(<span class="params">self, head, val</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :type val: int</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        vhead = ListNode(-<span class="number">1</span>,head)</span><br><span class="line">        left = vhead</span><br><span class="line">        right = head</span><br><span class="line">        <span class="keyword">if</span> vhead.<span class="built_in">next</span> == <span class="literal">None</span>: <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> right != <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> right.val == val:</span><br><span class="line">                left.<span class="built_in">next</span> = right.<span class="built_in">next</span></span><br><span class="line">                right = right.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left = right</span><br><span class="line">                right = right.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> vhead.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><ul><li>时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></li><li>空间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></li></ul><h3 id="方法2：递归">方法2：递归</h3><p>**参考了评论区的大佬的思路。**迭代的方法要稍微理解一下，简单来说，对头节点以外的节点进行删除val的操作。递归的中止调节是头节点为空。</p><p>**我个人理解：**对链表从前往后看就是把当前节点和后续已经删除了val的链表相连，从后往前看就是链表从后往前删除有val值的节点。</p><p><a href="https://leetcode-cn.com/problems/remove-linked-list-elements/solution/yi-chu-lian-biao-yuan-su-by-leetcode-sol-654m/"><strong>官方的解答文字：</strong></a>链表的定义具有递归的性质，因此链表题目常可以用递归的方法求解。这道题要求删除链表中所有节点值等于特定值的节点，可以用递归实现。</p><p>对于给定的链表，首先对除了头节点head以外的节点进行删除操作，然后判断head的节点值是否等于给定的val。如果head的节点值等于val，则head需要被删除，因此删除操作后的头节点为head.next；如果head 的节点值不等于val，则head保留，因此删除操作后的头节点还是head。上述过程是一个递归的过程。</p><p>递归的终止条件是head为空，此时直接返回head。当head不为空时，递归地进行删除操作，然后判断head的节点值是否等于val并决定是否要删除head。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeElements</span>(<span class="params">self, head, val</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :type val: int</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> head == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        head.<span class="built_in">next</span> = self.removeElements(head.<span class="built_in">next</span>,val)</span><br><span class="line">        <span class="keyword">if</span> head.val == val:</span><br><span class="line">            <span class="keyword">return</span> head.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure><ul><li>时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></li><li>空间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，空间复杂度主要取决于递归调用栈，最多不会超过n层。</li></ul><h2 id="Reference">Reference</h2><p><a href="https://github.com/youngyangyang04/leetcode-master/blob/master/problems/0203.%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0.md">leetcode-master/0203.移除链表元素.md at master · youngyangyang04/leetcode-master (github.com)</a></p><p><a href="https://leetcode-cn.com/problems/remove-linked-list-elements/solution/yi-chu-lian-biao-yuan-su-by-leetcode-sol-654m/">移除链表元素 - 移除链表元素 - 力扣（LeetCode） (leetcode-cn.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 每日一题 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>交换与路由总复习第一章</title>
      <link href="/2021/06/05/%E4%BA%A4%E6%8D%A2%E4%B8%8E%E8%B7%AF%E7%94%B1%E6%80%BB%E5%A4%8D%E4%B9%A0%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
      <url>/2021/06/05/%E4%BA%A4%E6%8D%A2%E4%B8%8E%E8%B7%AF%E7%94%B1%E6%80%BB%E5%A4%8D%E4%B9%A0%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1>交换概论</h1><h2 id="电信网">电信网</h2><h3 id="电信网的结构">电信网的结构</h3><img src="https://api2.mubu.com/v3/document_image/1b920c78-a76f-4451-8a0b-f91d308c8e61-1279996.jpg" alt="img" style="zoom: 50%;" /><h4 id="电信网的三种支撑网络和主要作用：">电信网的三种支撑网络和主要作用：</h4><ul><li><strong>信令网：</strong><br>信令网是通信网的神经网络，能为现代通信网提供高效、 可靠的信令服务；</li><li><strong>数字同步网：</strong><br>数字同步网能够保证网络中各节点同步工作</li><li><strong>电信管理网：</strong><br>电信管理网 能够全面的、 有效的、 协调的管理整个电信网。</li></ul><h2 id="交换">交换</h2><h3 id="交换的概念">交换的概念</h3><p>所谓电信交换，就是在电信网上，在通信的源点和目的点之间建立通信通道，并传送信息的机制。</p><ul><li><strong>选路：</strong><br>每一个交换设备如何选择合适的出线，从而在交换网中建立最佳的从源点到目的点的信息通道</li><li><strong>交换：</strong><br>每个交换设备内部如何将入线的信息送到出线上</li></ul><h3 id="为什么要引入交换功能">为什么要引入交换功能</h3><p>为了克服两两全互连的连接方式所存在的如下 3 个问题：</p><ul><li>两两互连所需的线对数的数量很大， 线路浪费大、 成本高。</li><li>要配置多路选择开关， 且在主、 被叫终端之间需要复杂的开关控制及选择协调。</li><li>增加一个用户终端的操作很复杂。 当增加第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">N+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 个终端时， 必须增设$ N$ 条线路，<br>安装维护困难。</li></ul><p>如果在用户分布密集的中心安装一个设备——交换节点（也称为交换机） ， 每个<br>用户的终端设备不再是两两互连， 而是分别经由各自的一条专用通信线路连接到交换节点<br>上。 这时 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span> 个用户只需要$ N $条电话线， 用户终端无需使用多路选择开关； 当增加新终端时，<br>只需增加一条通信线路。</p><h2 id="复用技术和寻址技术">复用技术和寻址技术</h2><h3 id="复用">复用</h3><ul><li>频分复用</li><li>码分复用</li><li>波分复用</li><li><strong>时分复用（三种时分复用的特点或区别）</strong><br><img src="https://api2.mubu.com/v3/document_image/0847cd2f-a227-44ea-b82a-8c2685d2db17-1279996.jpg" alt="img" style="zoom: 50%;" /><ul><li><strong>同步时分复用</strong><ul><li>是位置信道：依据数字信号在时间轴上的位置区别各路信号，无信息传送时也占用信道</li><li>各支路的信息比特率稳定</li><li>信号经过复用器和分路器时会有传输时延，但时延不大。</li></ul></li><li><strong>统计时分复用</strong><ul><li>信息属于哪路取决于标志码，与出现的时间无关；</li><li>分组长度可变，分组头起定界作用；</li><li>统计复用提高信道利用率；</li><li>一定容量的排队存贮器，解决瞬间的出线冲突；</li></ul></li><li><strong>异步时分复用</strong><ul><li>标志化信道：分组长度固定，分组头标志输出端</li><li>统计复用提高信道利用率</li><li>插入空信元保持信元同步</li><li>较小容量的排队存贮器，解决瞬间的出线冲突</li></ul></li></ul></li></ul><h3 id="寻址">寻址</h3><ul><li><strong>有连接寻址：</strong><br>用户利用人机信令信号，把寻址要求通知信令网；    信令网在信源与信宿之间，利用网络资源建立连接；   然后传递信号；    呼叫结束，信令网释放网络资源。</li><li><strong>无连接寻址：</strong><br>在各个网络节点，根据信元中的目的地址数据，借助于路由器具有的地址知识，选择通往目的地的链路，在每个节点都进行竞争接入。</li></ul><h2 id="面向连接和面向无连接的工作方式比较">面向连接和面向无连接的工作方式比较</h2><ul><li><strong>面向连接的特点</strong><ul><li>数据传输过程必须经过连接建立、信息传送与释放连接三个阶段</li><li>在呼叫建立时向网络申请资源， 建立一条主叫到被叫之间信息通路的连接</li><li>只要连接成功就不会发生冲突， 数据传送可靠、 时延小， 且保持传输的顺序。</li><li>呼叫结束时释放该连接通路。</li></ul></li><li><strong>面向无连接的特点</strong><ul><li>每个分组包含完整地址信息，独立寻找路由；</li><li>分组到达的顺序不同， 传输时延大， 时延差别大；</li><li>对网络故障适应性强。</li></ul></li></ul><h2 id="目前通信网中的交换技术">目前通信网中的交换技术</h2><ul><li>电路交换</li><li>报文交换</li><li>分组交换</li><li>快速电路交换</li><li>帧中继</li><li>ATM交换</li><li>IP交换</li><li>光交换</li><li>软交换</li></ul><h3 id="电路交换、分组交换和ATM交换的异同">电路交换、分组交换和ATM交换的异同</h3><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">工作方式</th><th style="text-align:center">复用方式</th><th style="text-align:center">差错控制</th><th style="text-align:center">流量控制</th><th style="text-align:center">带宽分配</th><th style="text-align:center">支持的业务</th></tr></thead><tbody><tr><td style="text-align:center">电路交换</td><td style="text-align:center">面向连接</td><td style="text-align:center">同步时分复用</td><td style="text-align:center">无</td><td style="text-align:center">呼损</td><td style="text-align:center">固定分配带宽</td><td style="text-align:center">话音</td></tr><tr><td style="text-align:center">分组交换</td><td style="text-align:center">面向连接和无连接</td><td style="text-align:center">统计时分复用</td><td style="text-align:center">有</td><td style="text-align:center">呼叫延迟</td><td style="text-align:center">动态分配带宽</td><td style="text-align:center">数据</td></tr><tr><td style="text-align:center">ATM 交换</td><td style="text-align:center">面向连接</td><td style="text-align:center">异步时分复用</td><td style="text-align:center">有</td><td style="text-align:center">呼叫延迟</td><td style="text-align:center">动态分配带宽</td><td style="text-align:center">话音、数据、多媒体</td></tr></tbody></table><p>**需要注意的是：**经管电路交换、分组交换和ATM交换都可以采用面向连接的方式，但它们是有不同的：</p><ul><li>电路交换的面向连接是物理连接</li><li>分组交换的面向连接是逻辑连接（LCN）</li><li>ATM交换的面向连接是虚连接（VPI和VCI）</li></ul><h3 id="分组交换的两种工作方式的比较">分组交换的两种工作方式的比较</h3><ul><li><strong>数据报</strong><ul><li>面向无连接的工作方式。</li><li>每个数据分组都包含终点地址信息，独立寻找路径，在网络终点需要重新排序。</li><li>传输时延大，时延差别大，对网络故障适应性强。</li></ul></li><li><strong>虚电路</strong><ul><li>面向连接的工作方式，通信要经过 连接建立、数据传输、连接拆除 三个阶段</li><li>它不同于电路交换中的物理连接，而是逻辑连接</li><li>分组头中只含有对应于所建立的逻辑信道标识</li><li>传输时延小，时延差别小，分组有序到达，网络故障时要重新连接。</li></ul></li></ul><h3 id="分组交换和中继的区别和联系">分组交换和中继的区别和联系</h3><p><strong>区别</strong></p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">帧中继</th><th style="text-align:center">分组交换(x.25)</th></tr></thead><tbody><tr><td style="text-align:center">特点</td><td style="text-align:center">速率高、时延小</td><td style="text-align:center">速率低、时延大</td></tr><tr><td style="text-align:center">最小单位</td><td style="text-align:center">帧</td><td style="text-align:center">分组</td></tr><tr><td style="text-align:center">信息传输</td><td style="text-align:center">端到端确认信息</td><td style="text-align:center">点到点确认信息</td></tr><tr><td style="text-align:center">控制信令</td><td style="text-align:center">公共信令</td><td style="text-align:center">随路信令</td></tr><tr><td style="text-align:center">协议栈</td><td style="text-align:center">物理层、链路层</td><td style="text-align:center">物理层、链路层、网络层</td></tr><tr><td style="text-align:center">寻址和选路</td><td style="text-align:center">二层（链路层）完成</td><td style="text-align:center">三层（分组层）完成</td></tr><tr><td style="text-align:center">其他</td><td style="text-align:center">网络内部不需要差错控制 传输线必须是光纤</td><td style="text-align:center">网络内部有差错控制</td></tr></tbody></table><p><strong>联系</strong></p><ul><li>帧中继是分组交换的改进，都采用面向连接的交换技术</li><li>都可以提供PVC（永久虚拟电路）和SVC（交换虚拟电路）业务</li><li>均采用统计时分复用方式，可以动态分配带宽</li></ul><h4 id="PVC和SVC">PVC和SVC</h4><ul><li>**PVC：**固定的虚电路， 不需在呼叫时临时建立虚电路， 可直接进入数据传送阶段的方式。 属于专线。</li><li>**SVC：**用户通过发送呼叫请求分组来建立虚电路的方式。 是临时的虚电路。</li></ul><h2 id="交换系统的基本结构和主要技术">交换系统的基本结构和主要技术</h2><h3 id="基本结构">基本结构</h3><img src="https://api2.mubu.com/v3/document_image/d65242d6-9330-4c33-a0c7-de1e1ead3060-1279996.jpg" alt="img" style="zoom:50%;" /><ul><li><strong>信息传输子系统</strong><br>信息传送子系统主要包括交换网络和各种接口<ul><li><strong>交换网络</strong><br>对于信息传送子系统而言， 交换就是信息从某个接口进入交换系统经交换网络的交换从某个接口出去。</li><li><strong>接口</strong><br>接口的功能主要是将进入交换系统的信号转变为交换系统内部所适应的信号， 或者是相反的过程， 这种变换包括信号码型、 速率等方面的变换。</li></ul></li><li><strong>控制子系统</strong><br>控制子系统是交换系统的“指挥中心” ， 交换系统的交换网络、 各种接口以及其他功能部件都是在控制子系统的控制协调下有条不紊地工作的。</li></ul><h3 id="关键技术">关键技术</h3><ul><li>**互连技术：**交换网络的拓扑结构、 选路策略、 控制机理、 多播方式、 阻塞特性、 故障防卫；</li><li><strong>接口技术：</strong> 模拟用户接口、 数字用户接口、 模拟中继接口、 数字中继接口；</li><li><strong>信令技术：</strong> 用户信令、 局间信令；</li><li><strong>控制技术：</strong> 控制系统的结构方式、 处理机间的通信方式、 多处理机结构。</li></ul><h1>PDF下载</h1><p><a href="https://github.com/DogWealth/exam-review-material">DogWealth/exam-review-material: 复习资料 (github.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 专业课 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 交换与路由 </tag>
            
            <tag> 复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/06/05/hello-world/"/>
      <url>/2021/06/05/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
